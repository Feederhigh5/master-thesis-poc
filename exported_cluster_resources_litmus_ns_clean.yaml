apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 9ca01655f55d2a58a571f39ca49bc9b37be6c35db913fcded183753930abe856
      cni.projectcalico.org/podIP: ""
      cni.projectcalico.org/podIPs: ""
      kubectl.kubernetes.io/default-container: main
      workflows.argoproj.io/node-id: bank-of-anthos-network-loss-4035225182
      workflows.argoproj.io/node-name: bank-of-anthos-network-loss[3].revert-chaos
    creationTimestamp: "2023-03-27T13:37:41Z"
    labels:
      workflows.argoproj.io/completed: "true"
      workflows.argoproj.io/controller-instanceid: 934286c9-b729-4581-92a3-b75e5a29b62f
      workflows.argoproj.io/workflow: bank-of-anthos-network-loss
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2023-03-27T13:37:49Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.30.188.158"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-03-27T13:37:50Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/default-container: {}
            f:workflows.argoproj.io/node-id: {}
            f:workflows.argoproj.io/node-name: {}
          f:labels:
            .: {}
            f:workflows.argoproj.io/completed: {}
            f:workflows.argoproj.io/controller-instanceid: {}
            f:workflows.argoproj.io/workflow: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"cf86833d-f13c-411e-8f60-8f6ababa0dab"}: {}
        f:spec:
          f:containers:
            k:{"name":"main"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"ARGO_CONTAINER_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_DEADLINE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_INCLUDE_SCRIPT_OUTPUT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_NODE_ID"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_PROGRESS_FILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_PROGRESS_FILE_TICK_DURATION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_PROGRESS_PATCH_TICK_DURATION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_TEMPLATE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/var/run/argo"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"wait"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"ARGO_CONTAINER_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_CONTAINER_RUNTIME_EXECUTOR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_DEADLINE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_INCLUDE_SCRIPT_OUTPUT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_INSTANCE_ID"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_NODE_ID"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"ARGO_PROGRESS_FILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_PROGRESS_FILE_TICK_DURATION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_PROGRESS_PATCH_TICK_DURATION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_TEMPLATE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_WORKFLOW_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_WORKFLOW_UID"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"GODEBUG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/var/run/argo"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:runAsNonRoot: {}
            f:runAsUser: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"var-run-argo"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: workflow-controller
      operation: Update
      time: "2023-03-27T13:37:52Z"
    name: bank-of-anthos-network-loss-4035225182
    namespace: litmus
    ownerReferences:
    - apiVersion: argoproj.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: Workflow
      name: bank-of-anthos-network-loss
      uid: cf86833d-f13c-411e-8f60-8f6ababa0dab
    resourceVersion: "1579058"
    uid: 8daecab0-f2da-40e3-8835-eecba97bebc1
  spec:
    containers:
    - command:
      - argoexec
      - wait
      - --loglevel
      - info
      env:
      - name: ARGO_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: ARGO_CONTAINER_RUNTIME_EXECUTOR
        value: k8sapi
      - name: GODEBUG
        value: x509ignoreCN=0
      - name: ARGO_WORKFLOW_NAME
        value: bank-of-anthos-network-loss
      - name: ARGO_WORKFLOW_UID
        value: cf86833d-f13c-411e-8f60-8f6ababa0dab
      - name: ARGO_INSTANCE_ID
        value: 934286c9-b729-4581-92a3-b75e5a29b62f
      - name: ARGO_CONTAINER_NAME
        value: wait
      - name: ARGO_TEMPLATE
        value: '{"name":"revert-chaos","inputs":{},"outputs":{},"metadata":{},"container":{"name":"","image":"litmuschaos/k8s:latest","command":["sh","-c"],"args":["kubectl
          delete chaosengine pod-network-loss-chaos -n litmus"],"resources":{}}}'
      - name: ARGO_NODE_ID
        value: bank-of-anthos-network-loss-4035225182
      - name: ARGO_INCLUDE_SCRIPT_OUTPUT
        value: "false"
      - name: ARGO_DEADLINE
        value: "0001-01-01T00:00:00Z"
      - name: ARGO_PROGRESS_FILE
        value: /var/run/argo/progress
      - name: ARGO_PROGRESS_PATCH_TICK_DURATION
        value: 1m0s
      - name: ARGO_PROGRESS_FILE_TICK_DURATION
        value: 3s
      image: litmuschaos/argoexec:v3.3.1
      imagePullPolicy: IfNotPresent
      name: wait
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/argo
        name: var-run-argo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-9hpjf
        readOnly: true
    - args:
      - kubectl delete chaosengine pod-network-loss-chaos -n litmus
      command:
      - sh
      - -c
      env:
      - name: ARGO_CONTAINER_NAME
        value: main
      - name: ARGO_TEMPLATE
        value: '{"name":"revert-chaos","inputs":{},"outputs":{},"metadata":{},"container":{"name":"","image":"litmuschaos/k8s:latest","command":["sh","-c"],"args":["kubectl
          delete chaosengine pod-network-loss-chaos -n litmus"],"resources":{}}}'
      - name: ARGO_NODE_ID
        value: bank-of-anthos-network-loss-4035225182
      - name: ARGO_INCLUDE_SCRIPT_OUTPUT
        value: "false"
      - name: ARGO_DEADLINE
        value: "0001-01-01T00:00:00Z"
      - name: ARGO_PROGRESS_FILE
        value: /var/run/argo/progress
      - name: ARGO_PROGRESS_PATCH_TICK_DURATION
        value: 1m0s
      - name: ARGO_PROGRESS_FILE_TICK_DURATION
        value: 3s
      image: litmuschaos/k8s:latest
      imagePullPolicy: Always
      name: main
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/argo
        name: var-run-argo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-9hpjf
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: 10.85.149.8
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
    serviceAccount: argo-chaos
    serviceAccountName: argo-chaos
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 600
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 600
    volumes:
    - emptyDir: {}
      name: var-run-argo
    - name: kube-api-access-9hpjf
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-03-27T13:37:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-03-27T13:37:47Z"
      reason: PodFailed
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-03-27T13:37:47Z"
      reason: PodFailed
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-03-27T13:37:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://e82daf7dd1cc50f505cd538cc1031e210591def9933238a061386fd622ae4719
      image: docker.io/litmuschaos/k8s:latest
      imageID: docker.io/litmuschaos/k8s@sha256:cfd7cbf3bb7b29b3268cff12e37c8b96f792bb0a1dc297440700e8259e583c1c
      lastState: {}
      name: main
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://e82daf7dd1cc50f505cd538cc1031e210591def9933238a061386fd622ae4719
          exitCode: 1
          finishedAt: "2023-03-27T13:37:46Z"
          reason: Error
          startedAt: "2023-03-27T13:37:45Z"
    - containerID: containerd://7124d30c69f15e9b8950e4a9c484e7160f0fc34012517d2fc4f4d60f0c68bd38
      image: docker.io/litmuschaos/argoexec:v3.3.1
      imageID: docker.io/litmuschaos/argoexec@sha256:d7227ff29b9573f62f3388da4f528cf011f0b52bd8e35633ebd3d025afeae075
      lastState: {}
      name: wait
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://7124d30c69f15e9b8950e4a9c484e7160f0fc34012517d2fc4f4d60f0c68bd38
          exitCode: 0
          finishedAt: "2023-03-27T13:37:47Z"
          reason: Completed
          startedAt: "2023-03-27T13:37:44Z"
    hostIP: 10.85.149.8
    phase: Failed
    podIP: 172.30.188.158
    podIPs:
    - ip: 172.30.188.158
    qosClass: BestEffort
    startTime: "2023-03-27T13:37:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 9c01567289dfb99a37ccaa269275c9ce2c1efe0184be85de36ad712c96d7d547
      cni.projectcalico.org/podIP: 172.30.140.108/32
      cni.projectcalico.org/podIPs: 172.30.140.108/32
    creationTimestamp: "2023-03-23T08:16:49Z"
    generateName: chaos-exporter-6c9b5988c4-
    labels:
      app: chaos-exporter
      pod-template-hash: 6c9b5988c4
      release: prometheus-stack
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
            f:release: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7f1b8e92-2d8a-465c-8b96-a28912c7b173"}: {}
        f:spec:
          f:containers:
            k:{"name":"chaos-exporter"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"TSDB_SCRAPE_INTERVAL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:49Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:50Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.30.140.108"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:54Z"
    name: chaos-exporter-6c9b5988c4-lndf8
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: chaos-exporter-6c9b5988c4
      uid: 7f1b8e92-2d8a-465c-8b96-a28912c7b173
    resourceVersion: "863021"
    uid: 9f98b4ef-d43b-4504-a708-cf368eb07ea8
  spec:
    containers:
    - env:
      - name: TSDB_SCRAPE_INTERVAL
        value: "10"
      image: litmuschaos/chaos-exporter:2.14.0
      imagePullPolicy: Always
      name: chaos-exporter
      ports:
      - containerPort: 8080
        name: tcp
        protocol: TCP
      resources:
        limits:
          cpu: 225m
          ephemeral-storage: 1Gi
          memory: 500Mi
        requests:
          cpu: 125m
          ephemeral-storage: 500Mi
          memory: 300Mi
      securityContext:
        allowPrivilegeEscalation: false
        runAsUser: 2000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6kmts
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: 10.85.149.20
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: litmus-cluster-scope
    serviceAccountName: litmus-cluster-scope
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 600
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 600
    volumes:
    - name: kube-api-access-6kmts
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:49Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:53Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:53Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://679080c99d2f49efdd5f407cb0f695960adbe96f7ba1a7ecea51d8af00d94cfc
      image: docker.io/litmuschaos/chaos-exporter:2.14.0
      imageID: docker.io/litmuschaos/chaos-exporter@sha256:ce4bb3ad1415ad8753460d6c02d40af3b5ee5d7f54e19d2b8d5c89863d29fd96
      lastState: {}
      name: chaos-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-03-23T08:16:53Z"
    hostIP: 10.85.149.20
    phase: Running
    podIP: 172.30.140.108
    podIPs:
    - ip: 172.30.140.108
    qosClass: Burstable
    startTime: "2023-03-23T08:16:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 47f690464b89d1f292494640037eea9c4dbd527ac343aecb5017db1b0cba6b31
      cni.projectcalico.org/podIP: 172.30.188.190/32
      cni.projectcalico.org/podIPs: 172.30.188.190/32
    creationTimestamp: "2023-03-23T08:16:49Z"
    generateName: chaos-litmus-auth-server-b8dcdf66b-
    labels:
      app.kubernetes.io/component: litmus-auth-server
      app.kubernetes.io/instance: chaos
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: litmus
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/version: 2.15.10
      helm.sh/chart: litmus-2.15.10
      litmuschaos.io/version: 2.14.0
      pod-template-hash: b8dcdf66b
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
            f:litmuschaos.io/version: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"dd754b6f-d49e-46e8-9026-2882d2c135b8"}: {}
        f:spec:
          f:automountServiceAccountToken: {}
          f:containers:
            k:{"name":"auth-server"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"DB_PASSWORD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DB_USER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"LITMUS_GQL_GRPC_ENDPOINT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"LITMUS_GQL_GRPC_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:envFrom: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":3000,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":3030,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:readOnlyRootFilesystem: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:initContainers:
            .: {}
            k:{"name":"wait-for-mongodb"}:
              .: {}
              f:args: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:49Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:50Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.30.188.190"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-03-23T08:17:26Z"
    name: chaos-litmus-auth-server-b8dcdf66b-gkt5j
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: chaos-litmus-auth-server-b8dcdf66b
      uid: dd754b6f-d49e-46e8-9026-2882d2c135b8
    resourceVersion: "863123"
    uid: cabe5995-237a-4049-845e-ffffcf3c7c82
  spec:
    automountServiceAccountToken: false
    containers:
    - env:
      - name: DB_PASSWORD
        value: superhardpassword
      - name: DB_USER
        value: root
      - name: LITMUS_GQL_GRPC_ENDPOINT
        value: chaos-litmus-server-service
      - name: LITMUS_GQL_GRPC_PORT
        value: :8000
      envFrom:
      - secretRef:
          name: chaos-litmus-admin-secret
      - configMapRef:
          name: chaos-litmus-admin-config
      image: litmuschaos/litmusportal-auth-server:2.14.0
      imagePullPolicy: Always
      name: auth-server
      ports:
      - containerPort: 3030
        name: auth-server
        protocol: TCP
      - containerPort: 3000
        name: auth-rpc-server
        protocol: TCP
      resources:
        limits:
          cpu: 550m
          ephemeral-storage: 1Gi
          memory: 712Mi
        requests:
          cpu: 225m
          ephemeral-storage: 500Mi
          memory: 250Mi
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 2000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - while [[ $(curl -sw '%{http_code}' http://chaos-mongodb:27017 -o /dev/null)
        -ne 200 ]]; do sleep 5; echo 'Waiting for the MongoDB to be ready...'; done;
        echo 'Connection with MongoDB established'
      command:
      - /bin/sh
      - -c
      image: litmuschaos/curl:2.14.0
      imagePullPolicy: Always
      name: wait-for-mongodb
      resources:
        limits:
          cpu: 250m
          ephemeral-storage: 1Gi
          memory: 512Mi
        requests:
          cpu: 25m
          ephemeral-storage: 500Mi
          memory: 150Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
    nodeName: 10.85.149.8
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: litmus-server-account
    serviceAccountName: litmus-server-account
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 600
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 600
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:17:25Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:17:26Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:17:26Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://bd96b1d3573da29e05e67810016461092a4184360c5ba76de9a61cd60c1d9065
      image: docker.io/litmuschaos/litmusportal-auth-server:2.14.0
      imageID: docker.io/litmuschaos/litmusportal-auth-server@sha256:77b88bfb6fa4e6a315b6096265646cd10ee210cc31c78dd2bdfb8ea5cbaeb0bb
      lastState: {}
      name: auth-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-03-23T08:17:26Z"
    hostIP: 10.85.149.8
    initContainerStatuses:
    - containerID: containerd://048775c1d62ddfc80f76add024301a878f41ce96607e6cb8a823b6ecff45ed42
      image: docker.io/litmuschaos/curl:2.14.0
      imageID: docker.io/litmuschaos/curl@sha256:b8c8a8fa772126b681f4b06672130a60d518502497415345e5a1c2af32a32265
      lastState: {}
      name: wait-for-mongodb
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: containerd://048775c1d62ddfc80f76add024301a878f41ce96607e6cb8a823b6ecff45ed42
          exitCode: 0
          finishedAt: "2023-03-23T08:17:25Z"
          reason: Completed
          startedAt: "2023-03-23T08:16:53Z"
    phase: Running
    podIP: 172.30.188.190
    podIPs:
    - ip: 172.30.188.190
    qosClass: Burstable
    startTime: "2023-03-23T08:16:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 3d5c01ca5b0a321026383b1fd1b4e6dec8c46b9ed94f986e81f78770a4cb1473
      cni.projectcalico.org/podIP: 172.30.140.105/32
      cni.projectcalico.org/podIPs: 172.30.140.105/32
    creationTimestamp: "2023-03-23T08:16:49Z"
    generateName: chaos-litmus-frontend-6ffc95c884-
    labels:
      app.kubernetes.io/component: litmus-frontend
      app.kubernetes.io/instance: chaos
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: litmus
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/version: 2.15.10
      helm.sh/chart: litmus-2.15.10
      litmuschaos.io/version: 2.14.0
      pod-template-hash: 6ffc95c884
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
            f:litmuschaos.io/version: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"00282446-8ea6-4fcb-9b58-082f00087a97"}: {}
        f:spec:
          f:automountServiceAccountToken: {}
          f:containers:
            k:{"name":"litmusportal-frontend"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/nginx/conf.d/default.conf"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:subPath: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"nginx-config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:49Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:51Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.30.140.105"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-03-23T08:17:00Z"
    name: chaos-litmus-frontend-6ffc95c884-z8r6p
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: chaos-litmus-frontend-6ffc95c884
      uid: 00282446-8ea6-4fcb-9b58-082f00087a97
    resourceVersion: "863049"
    uid: 57dfb88a-9be2-463f-9ddc-309038197ee1
  spec:
    automountServiceAccountToken: false
    containers:
    - image: litmuschaos/litmusportal-frontend:2.14.0
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /
          port: http
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: litmusportal-frontend
      ports:
      - containerPort: 8080
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: http
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: 550m
          ephemeral-storage: 1Gi
          memory: 512Mi
        requests:
          cpu: 125m
          ephemeral-storage: 500Mi
          memory: 150Mi
      securityContext:
        allowPrivilegeEscalation: false
        runAsNonRoot: true
        runAsUser: 2000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/nginx/conf.d/default.conf
        name: nginx-config
        subPath: default.conf
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: 10.85.149.20
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 600
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 600
    volumes:
    - configMap:
        defaultMode: 420
        name: chaos-litmus-frontend-nginx-configuration
      name: nginx-config
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:49Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:17:00Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:17:00Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://9756fe8502a0c0b6bfa2c4bac336a43df05f58271494423c4336bec6b9a2eb92
      image: docker.io/litmuschaos/litmusportal-frontend:2.14.0
      imageID: docker.io/litmuschaos/litmusportal-frontend@sha256:3af2c0bbdb6cc54c14f11beef19857f1572354dd976e3ee1319aaec24698a445
      lastState: {}
      name: litmusportal-frontend
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-03-23T08:16:53Z"
    hostIP: 10.85.149.20
    phase: Running
    podIP: 172.30.140.105
    podIPs:
    - ip: 172.30.140.105
    qosClass: Burstable
    startTime: "2023-03-23T08:16:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 06f086e0b20a3ab014cca6ab7ed683c0a4a04182977d3b80b5110046d471138a
      cni.projectcalico.org/podIP: 172.30.140.104/32
      cni.projectcalico.org/podIPs: 172.30.140.104/32
    creationTimestamp: "2023-03-23T08:16:49Z"
    generateName: chaos-litmus-server-585786dd9c-
    labels:
      app.kubernetes.io/component: litmus-server
      app.kubernetes.io/instance: chaos
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: litmus
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/version: 2.15.10
      helm.sh/chart: litmus-2.15.10
      litmuschaos.io/version: 2.14.0
      pod-template-hash: 585786dd9c
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
            f:litmuschaos.io/version: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7c03e29b-696c-4603-820b-2256304b1baa"}: {}
        f:spec:
          f:containers:
            k:{"name":"graphql-server"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"AGENT_DEPLOYMENTS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_WORKFLOW_CONTROLLER_IMAGE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ARGO_WORKFLOW_EXECUTOR_IMAGE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CHAOS_CENTER_SCOPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CHAOS_CENTER_UI_ENDPOINT"}:
                  .: {}
                  f:name: {}
                k:{"name":"CONTAINER_RUNTIME_EXECUTOR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DB_PASSWORD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DB_USER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"EVENT_TRACKER_IMAGE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"HUB_BRANCH_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"INGRESS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"INGRESS_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"LITMUS_AUTH_GRPC_ENDPOINT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"LITMUS_AUTH_GRPC_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"LITMUS_CHAOS_EXPORTER_IMAGE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"LITMUS_CHAOS_OPERATOR_IMAGE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"LITMUS_CHAOS_RUNNER_IMAGE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"LITMUS_PORTAL_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"REMOTE_HUB_MAX_SIZE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SELF_AGENT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SELF_AGENT_NODE_SELECTOR"}:
                  .: {}
                  f:name: {}
                k:{"name":"SELF_AGENT_TOLERATIONS"}:
                  .: {}
                  f:name: {}
                k:{"name":"SERVER_SERVICE_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SUBSCRIBER_IMAGE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TLS_CERT_64"}:
                  .: {}
                  f:name: {}
                k:{"name":"TLS_SECRET_NAME"}:
                  .: {}
                  f:name: {}
                k:{"name":"WORKFLOW_HELPER_IMAGE_VERSION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:envFrom: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8000,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":8080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:readOnlyRootFilesystem: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/tmp/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp/version"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:initContainers:
            .: {}
            k:{"name":"wait-for-mongodb"}:
              .: {}
              f:args: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"gitops-storage"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
            k:{"name":"hub-storage"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:49Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:51Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.30.140.104"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-03-23T08:17:40Z"
    name: chaos-litmus-server-585786dd9c-sxhqk
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: chaos-litmus-server-585786dd9c
      uid: 7c03e29b-696c-4603-820b-2256304b1baa
    resourceVersion: "863168"
    uid: d67b1f63-6c50-44a5-91a1-f544770539b1
  spec:
    containers:
    - env:
      - name: DB_PASSWORD
        value: superhardpassword
      - name: DB_USER
        value: root
      - name: LITMUS_PORTAL_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: CHAOS_CENTER_SCOPE
        value: cluster
      - name: SERVER_SERVICE_NAME
        value: chaos-litmus-server-service
      - name: INGRESS
        value: "false"
      - name: INGRESS_NAME
        value: litmus-ingress
      - name: LITMUS_AUTH_GRPC_ENDPOINT
        value: chaos-litmus-auth-server-service
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: ARGO_WORKFLOW_CONTROLLER_IMAGE
        value: litmuschaos/workflow-controller:v3.3.1
      - name: ARGO_WORKFLOW_EXECUTOR_IMAGE
        value: litmuschaos/argoexec:v3.3.1
      - name: EVENT_TRACKER_IMAGE
        value: litmuschaos/litmusportal-event-tracker:2.14.0
      - name: LITMUS_CHAOS_EXPORTER_IMAGE
        value: litmuschaos/chaos-exporter:2.14.0
      - name: LITMUS_CHAOS_OPERATOR_IMAGE
        value: litmuschaos/chaos-operator:2.14.0
      - name: LITMUS_CHAOS_RUNNER_IMAGE
        value: litmuschaos/chaos-runner:2.14.0
      - name: SUBSCRIBER_IMAGE
        value: litmuschaos/litmusportal-subscriber:2.14.0
      - name: AGENT_DEPLOYMENTS
        value: '["app=chaos-exporter", "name=chaos-operator", "app=event-tracker",
          "app=workflow-controller"]'
      - name: CHAOS_CENTER_UI_ENDPOINT
      - name: CONTAINER_RUNTIME_EXECUTOR
        value: k8sapi
      - name: HUB_BRANCH_NAME
        value: v2.14.x
      - name: LITMUS_AUTH_GRPC_PORT
        value: :3030
      - name: REMOTE_HUB_MAX_SIZE
        value: "5000000"
      - name: SELF_AGENT
        value: "true"
      - name: SELF_AGENT_NODE_SELECTOR
      - name: SELF_AGENT_TOLERATIONS
      - name: TLS_CERT_64
      - name: TLS_SECRET_NAME
      - name: WORKFLOW_HELPER_IMAGE_VERSION
        value: 2.14.0
      envFrom:
      - secretRef:
          name: chaos-litmus-admin-secret
      - configMapRef:
          name: chaos-litmus-admin-config
      image: litmuschaos/litmusportal-server:2.14.0
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /
          port: gql-server
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: graphql-server
      ports:
      - containerPort: 8080
        name: gql-server
        protocol: TCP
      - containerPort: 8000
        name: gql-rpc-server
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: gql-server
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: 550m
          ephemeral-storage: 1Gi
          memory: 712Mi
        requests:
          cpu: 225m
          ephemeral-storage: 500Mi
          memory: 250Mi
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 2000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp/
        name: gitops-storage
      - mountPath: /tmp/version
        name: hub-storage
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-v4lh7
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - while [[ $(curl -sw '%{http_code}' http://chaos-mongodb:27017 -o /dev/null)
        -ne 200 ]]; do sleep 5; echo 'Waiting for the MongoDB to be ready...'; done;
        echo 'Connection with MongoDB established'
      command:
      - /bin/sh
      - -c
      image: litmuschaos/curl:2.14.0
      imagePullPolicy: Always
      name: wait-for-mongodb
      resources:
        limits:
          cpu: 250m
          ephemeral-storage: 1Gi
          memory: 512Mi
        requests:
          cpu: 25m
          ephemeral-storage: 500Mi
          memory: 150Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-v4lh7
        readOnly: true
    nodeName: 10.85.149.20
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: litmus-server-account
    serviceAccountName: litmus-server-account
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 600
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 600
    volumes:
    - emptyDir: {}
      name: gitops-storage
    - emptyDir: {}
      name: hub-storage
    - name: kube-api-access-v4lh7
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:17:22Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:17:40Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:17:40Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://7df8273d245b0fdddc00eded705d58c79ac0efd33cee686801ccecd9b70dcb5d
      image: docker.io/litmuschaos/litmusportal-server:2.14.0
      imageID: docker.io/litmuschaos/litmusportal-server@sha256:23f6f9f15dbd5816cb27307bd05f4da4bc91287158324f1f08e2d56592ae0118
      lastState: {}
      name: graphql-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-03-23T08:17:23Z"
    hostIP: 10.85.149.20
    initContainerStatuses:
    - containerID: containerd://e76aca88508483c5a635be545d56a1ce45e796efeeb4caa2bb0ee3c55a480f5c
      image: docker.io/litmuschaos/curl:2.14.0
      imageID: docker.io/litmuschaos/curl@sha256:b8c8a8fa772126b681f4b06672130a60d518502497415345e5a1c2af32a32265
      lastState: {}
      name: wait-for-mongodb
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: containerd://e76aca88508483c5a635be545d56a1ce45e796efeeb4caa2bb0ee3c55a480f5c
          exitCode: 0
          finishedAt: "2023-03-23T08:17:20Z"
          reason: Completed
          startedAt: "2023-03-23T08:16:53Z"
    phase: Running
    podIP: 172.30.140.104
    podIPs:
    - ip: 172.30.140.104
    qosClass: Burstable
    startTime: "2023-03-23T08:16:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 168320cd41d5b65069117f8b2b2c7d065df99e479caaeb518cfca27f75e07e29
      cni.projectcalico.org/podIP: 172.30.188.137/32
      cni.projectcalico.org/podIPs: 172.30.188.137/32
      kubectl.kubernetes.io/restartedAt: "2023-03-20T10:36:03+01:00"
    creationTimestamp: "2023-03-23T08:16:49Z"
    generateName: chaos-mongodb-7fcb7c857f-
    labels:
      app.kubernetes.io/component: mongodb
      app.kubernetes.io/instance: chaos
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mongodb
      helm.sh/chart: mongodb-12.1.11
      pod-template-hash: 7fcb7c857f
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/restartedAt: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:helm.sh/chart: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"8ee3b385-1d72-46c7-bb2d-006db5d155ab"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:podAntiAffinity:
              .: {}
              f:preferredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"mongodb"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"ALLOW_EMPTY_PASSWORD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"BITNAMI_DEBUG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"MONGODB_DISABLE_JAVASCRIPT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"MONGODB_DISABLE_SYSTEM_LOG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"MONGODB_ENABLE_DIRECTORY_PER_DB"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"MONGODB_ENABLE_IPV6"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"MONGODB_ENABLE_JOURNAL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"MONGODB_PORT_NUMBER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"MONGODB_ROOT_PASSWORD"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef: {}
                k:{"name":"MONGODB_ROOT_USER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"MONGODB_SYSTEM_LOG_VERBOSITY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":27017,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/bitnami/mongodb"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/bitnami/scripts"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:fsGroup: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"common-scripts"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"datadir"}:
              .: {}
              f:name: {}
              f:persistentVolumeClaim:
                .: {}
                f:claimName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:49Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:52Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.30.188.137"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-03-28T21:49:46Z"
    name: chaos-mongodb-7fcb7c857f-5czwb
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: chaos-mongodb-7fcb7c857f
      uid: 8ee3b385-1d72-46c7-bb2d-006db5d155ab
    resourceVersion: "1800489"
    uid: fde33d57-3d76-4c28-8efc-97505e2fe0e6
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: mongodb
                app.kubernetes.io/instance: chaos
                app.kubernetes.io/name: mongodb
            namespaces:
            - litmus
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - env:
      - name: BITNAMI_DEBUG
        value: "false"
      - name: MONGODB_ROOT_USER
        value: root
      - name: MONGODB_ROOT_PASSWORD
        valueFrom:
          secretKeyRef:
            key: mongodb-root-password
            name: chaos-mongodb
      - name: ALLOW_EMPTY_PASSWORD
        value: "no"
      - name: MONGODB_SYSTEM_LOG_VERBOSITY
        value: "0"
      - name: MONGODB_DISABLE_SYSTEM_LOG
        value: "no"
      - name: MONGODB_DISABLE_JAVASCRIPT
        value: "no"
      - name: MONGODB_ENABLE_JOURNAL
        value: "yes"
      - name: MONGODB_PORT_NUMBER
        value: "27017"
      - name: MONGODB_ENABLE_IPV6
        value: "no"
      - name: MONGODB_ENABLE_DIRECTORY_PER_DB
        value: "no"
      image: docker.io/bitnami/mongodb:5.0.8-debian-10-r24
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /bitnami/scripts/ping-mongodb.sh
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 10
      name: mongodb
      ports:
      - containerPort: 27017
        name: mongodb
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /bitnami/scripts/readiness-probe.sh
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /bitnami/mongodb
        name: datadir
      - mountPath: /bitnami/scripts
        name: common-scripts
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vpmrj
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: 10.85.149.8
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: chaos-mongodb
    serviceAccountName: chaos-mongodb
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 600
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 600
    volumes:
    - configMap:
        defaultMode: 360
        name: chaos-mongodb-common-scripts
      name: common-scripts
    - name: datadir
      persistentVolumeClaim:
        claimName: chaos-mongodb
    - name: kube-api-access-vpmrj
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:49Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-03-28T21:49:46Z"
      message: 'containers with unready status: [mongodb]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-03-28T21:49:46Z"
      message: 'containers with unready status: [mongodb]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a799ac75f7de5cdd275c40c948ac4a8be8d9070f94631694a01ab1362f61f08d
      image: docker.io/bitnami/mongodb:5.0.8-debian-10-r24
      imageID: docker.io/bitnami/mongodb@sha256:8683a10d1e24dcb1053913f6e6acaa8b64001788b76ee8ccb2cd46149e4b50a3
      lastState:
        terminated:
          containerID: containerd://6a94407bedcef1309b938396dfc33cc55fa94775dbc56a0028536baff9173754
          exitCode: 0
          finishedAt: "2023-03-27T15:47:02Z"
          reason: Completed
          startedAt: "2023-03-27T13:36:45Z"
      name: mongodb
      ready: false
      restartCount: 4
      started: true
      state:
        running:
          startedAt: "2023-03-27T15:47:02Z"
    hostIP: 10.85.149.8
    phase: Running
    podIP: 172.30.188.137
    podIPs:
    - ip: 172.30.188.137
    qosClass: BestEffort
    startTime: "2023-03-23T08:16:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: fc243206270ba2af3565693643f6ea4df2661f3b9f09e25b9c5b592cef66f813
      cni.projectcalico.org/podIP: 172.30.188.189/32
      cni.projectcalico.org/podIPs: 172.30.188.189/32
    creationTimestamp: "2023-03-23T08:16:49Z"
    generateName: chaos-operator-ce-84bc885775-
    labels:
      app.kubernetes.io/component: operator
      app.kubernetes.io/managed-by: kubectl
      app.kubernetes.io/name: litmus
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/version: latest
      name: chaos-operator
      pod-template-hash: 84bc885775
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"04871a0e-cf60-4e81-8c13-4b1a833d1457"}: {}
        f:spec:
          f:containers:
            k:{"name":"chaos-operator"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CHAOS_RUNNER_IMAGE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OPERATOR_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"POD_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"WATCH_NAMESPACE"}:
                  .: {}
                  f:name: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:49Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:52Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.30.188.189"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:55Z"
    name: chaos-operator-ce-84bc885775-r697p
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: chaos-operator-ce-84bc885775
      uid: 04871a0e-cf60-4e81-8c13-4b1a833d1457
    resourceVersion: "863030"
    uid: 0edb3171-82c8-46f6-bb65-578116ab5b13
  spec:
    containers:
    - args:
      - -leader-elect=true
      command:
      - chaos-operator
      env:
      - name: CHAOS_RUNNER_IMAGE
        value: litmuschaos/chaos-runner:2.14.0
      - name: WATCH_NAMESPACE
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: OPERATOR_NAME
        value: chaos-operator
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: litmuschaos/chaos-operator:2.14.0
      imagePullPolicy: Always
      name: chaos-operator
      resources:
        limits:
          cpu: 225m
          ephemeral-storage: 1Gi
          memory: 500Mi
        requests:
          cpu: 125m
          ephemeral-storage: 500Mi
          memory: 300Mi
      securityContext:
        allowPrivilegeEscalation: false
        runAsUser: 2000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-rlzmd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: 10.85.149.8
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: litmus-cluster-scope
    serviceAccountName: litmus-cluster-scope
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 600
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 600
    volumes:
    - name: kube-api-access-rlzmd
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:50Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:55Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:55Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://9b0eecb63df8be210e40fe1e15c6a7d1bc7584d922ece557b0a6c3380f69f98b
      image: docker.io/litmuschaos/chaos-operator:2.14.0
      imageID: docker.io/litmuschaos/chaos-operator@sha256:69b1a6ff1409fc80cf169503e29d10e049b46108e57436e452e3800f5f911d70
      lastState: {}
      name: chaos-operator
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-03-23T08:16:55Z"
    hostIP: 10.85.149.8
    phase: Running
    podIP: 172.30.188.189
    podIPs:
    - ip: 172.30.188.189
    qosClass: Burstable
    startTime: "2023-03-23T08:16:50Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 91bb753bf4c551f8d8045fbae7f3030dd6726fbd5b1c894f0da8501ed105046b
      cni.projectcalico.org/podIP: 172.30.140.95/32
      cni.projectcalico.org/podIPs: 172.30.140.95/32
    creationTimestamp: "2023-03-23T08:16:49Z"
    generateName: debug-pod-55c9b84fb9-
    labels:
      app: debug-pod
      pod-template-hash: 55c9b84fb9
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"bf421729-bae6-470d-ba09-711dcb35c615"}: {}
        f:spec:
          f:containers:
            k:{"name":"debug-pod"}:
              .: {}
              f:args: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/bitnami/mongodb"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:fsGroup: {}
            f:runAsGroup: {}
            f:runAsNonRoot: {}
            f:runAsUser: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"datadir"}:
              .: {}
              f:name: {}
              f:persistentVolumeClaim:
                .: {}
                f:claimName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:49Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:52Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.30.140.95"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-03-23T08:17:06Z"
    name: debug-pod-55c9b84fb9-p7pfl
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: debug-pod-55c9b84fb9
      uid: bf421729-bae6-470d-ba09-711dcb35c615
    resourceVersion: "863068"
    uid: 523ca08b-eb39-4a01-9c05-c11f7cc41bf5
  spec:
    containers:
    - args:
      - -ec
      - while :; do echo .; sleep 5;done
      command:
      - /bin/sh
      image: centos:latest
      imagePullPolicy: Always
      name: debug-pod
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /bitnami/mongodb
        name: datadir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-jl4qd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: 10.85.149.20
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 600
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 600
    volumes:
    - name: datadir
      persistentVolumeClaim:
        claimName: chaos-mongodb
    - name: kube-api-access-jl4qd
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:50Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:17:06Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:17:06Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:50Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://21fa0fc2e8fd7c4a61789d206ca93c6ac576280b7207b1ce07a1dd777b603117
      image: docker.io/library/centos:latest
      imageID: docker.io/library/centos@sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177
      lastState: {}
      name: debug-pod
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-03-23T08:17:05Z"
    hostIP: 10.85.149.20
    phase: Running
    podIP: 172.30.140.95
    podIPs:
    - ip: 172.30.140.95
    qosClass: BestEffort
    startTime: "2023-03-23T08:16:50Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 086e4d0acb3ec0eb7110ddb32f45d5c4761bf4aaa1a844c55a50f214374bd01e
      cni.projectcalico.org/podIP: 172.30.188.133/32
      cni.projectcalico.org/podIPs: 172.30.188.133/32
    creationTimestamp: "2023-03-23T08:16:50Z"
    generateName: event-tracker-744b6fd8cf-
    labels:
      app: event-tracker
      pod-template-hash: 744b6fd8cf
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"d2d2b583-afa8-40ba-8beb-fc7d429093e2"}: {}
        f:spec:
          f:containers:
            k:{"name":"litmus-event-tracker"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"AGENT_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
              f:envFrom: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:50Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:51Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.30.188.133"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:58Z"
    name: event-tracker-744b6fd8cf-29j4p
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: event-tracker-744b6fd8cf
      uid: d2d2b583-afa8-40ba-8beb-fc7d429093e2
    resourceVersion: "863042"
    uid: 9b401172-dd6e-429a-9db5-f119427e8b3d
  spec:
    containers:
    - env:
      - name: AGENT_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      envFrom:
      - configMapRef:
          name: agent-config
      - secretRef:
          name: agent-secret
      image: litmuschaos/litmusportal-event-tracker:2.14.0
      imagePullPolicy: Always
      name: litmus-event-tracker
      resources:
        limits:
          cpu: 225m
          ephemeral-storage: 1Gi
          memory: 500Mi
        requests:
          cpu: 125m
          ephemeral-storage: 500Mi
          memory: 300Mi
      securityContext:
        allowPrivilegeEscalation: false
        runAsUser: 2000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-bxjtl
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: 10.85.149.8
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: event-tracker-sa
    serviceAccountName: event-tracker-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 600
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 600
    volumes:
    - name: kube-api-access-bxjtl
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:50Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:58Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:58Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:50Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://571b73da84310c0fa0937447cd51b2276d194a4bfbc7014b851b25b8ae698c45
      image: docker.io/litmuschaos/litmusportal-event-tracker:2.14.0
      imageID: docker.io/litmuschaos/litmusportal-event-tracker@sha256:2fb218aa2d8bfebddd78741445d9ef595eef4eed2ac227bc9cd7d26edb511cb8
      lastState: {}
      name: litmus-event-tracker
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-03-23T08:16:57Z"
    hostIP: 10.85.149.8
    phase: Running
    podIP: 172.30.188.133
    podIPs:
    - ip: 172.30.188.133
    qosClass: Burstable
    startTime: "2023-03-23T08:16:50Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 6bfd28ce376563b2946851c0d568320e4506aab3d2f28290104e51487cda649a
      cni.projectcalico.org/podIP: 172.30.140.109/32
      cni.projectcalico.org/podIPs: 172.30.140.109/32
    creationTimestamp: "2023-03-23T08:16:50Z"
    generateName: subscriber-686d9b8dd9-
    labels:
      app: subscriber
      pod-template-hash: 686d9b8dd9
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"69fc4480-197d-453c-98bd-7f7fef7f3bf8"}: {}
        f:spec:
          f:containers:
            k:{"name":"subscriber"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"AGENT_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
              f:envFrom: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:50Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:51Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.30.140.109"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-03-23T08:17:49Z"
    name: subscriber-686d9b8dd9-nbnvl
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: subscriber-686d9b8dd9
      uid: 69fc4480-197d-453c-98bd-7f7fef7f3bf8
    resourceVersion: "863196"
    uid: fdef6beb-1781-43c7-a1bc-161ac2ba26f4
  spec:
    containers:
    - env:
      - name: AGENT_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      envFrom:
      - configMapRef:
          name: agent-config
      - secretRef:
          name: agent-secret
      image: litmuschaos/litmusportal-subscriber:2.14.0
      imagePullPolicy: Always
      name: subscriber
      resources:
        limits:
          cpu: 225m
          ephemeral-storage: 1Gi
          memory: 500Mi
        requests:
          cpu: 125m
          ephemeral-storage: 500Mi
          memory: 300Mi
      securityContext:
        allowPrivilegeEscalation: false
        runAsUser: 2000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-v9s66
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: 10.85.149.20
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: litmus
    serviceAccountName: litmus
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 600
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 600
    volumes:
    - name: kube-api-access-v9s66
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:50Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:17:49Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:17:49Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:50Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://7e5ba49badf2af18be188f99d3acb9092e96d7d2f1929be00c1b2168b22fe676
      image: docker.io/litmuschaos/litmusportal-subscriber:2.14.0
      imageID: docker.io/litmuschaos/litmusportal-subscriber@sha256:59e6dd6db68eb7c85a3886bbf0c044ff4c9cbcd632bbb35fcec1c004152077b3
      lastState:
        terminated:
          containerID: containerd://175bb1d5f366c6ef27f31391ecdbd7eff0f3eb8cdeba53616475d37a689c7df8
          exitCode: 1
          finishedAt: "2023-03-23T08:17:33Z"
          reason: Error
          startedAt: "2023-03-23T08:17:31Z"
      name: subscriber
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2023-03-23T08:17:49Z"
    hostIP: 10.85.149.20
    phase: Running
    podIP: 172.30.140.109
    podIPs:
    - ip: 172.30.140.109
    qosClass: Burstable
    startTime: "2023-03-23T08:16:50Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 2a836b0e5b1959ec05e1e751495d44255b7d827eca7e4d842e6d8f23482c9e33
      cni.projectcalico.org/podIP: 172.30.188.191/32
      cni.projectcalico.org/podIPs: 172.30.188.191/32
    creationTimestamp: "2023-03-23T08:16:50Z"
    generateName: workflow-controller-768f7d94dc-
    labels:
      app: workflow-controller
      pod-template-hash: 768f7d94dc
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"afee2f90-ed75-4509-aa00-859a26e7c6d3"}: {}
        f:spec:
          f:containers:
            k:{"name":"workflow-controller"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"LEADER_ELECTION_DISABLE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:50Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/containerID: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:51Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.30.188.191"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:53Z"
    name: workflow-controller-768f7d94dc-ghwlf
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: workflow-controller-768f7d94dc
      uid: afee2f90-ed75-4509-aa00-859a26e7c6d3
    resourceVersion: "863008"
    uid: 7d4835cb-a31a-4f41-9167-134fde66f4b7
  spec:
    containers:
    - args:
      - --configmap
      - workflow-controller-configmap
      - --executor-image
      - litmuschaos/argoexec:v3.3.1
      - --container-runtime-executor
      - k8sapi
      command:
      - workflow-controller
      env:
      - name: LEADER_ELECTION_DISABLE
        value: "true"
      image: litmuschaos/workflow-controller:v3.3.1
      imagePullPolicy: IfNotPresent
      name: workflow-controller
      resources:
        limits:
          cpu: 225m
          ephemeral-storage: 1Gi
          memory: 500Mi
        requests:
          cpu: 125m
          ephemeral-storage: 500Mi
          memory: 300Mi
      securityContext:
        allowPrivilegeEscalation: false
        runAsUser: 2000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-sx7n2
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: 10.85.149.8
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: argo
    serviceAccountName: argo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 600
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 600
    volumes:
    - name: kube-api-access-sx7n2
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:50Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:53Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:53Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-03-23T08:16:50Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1b91af1f43f1047c03543fcf08e2cb6f2e13b1b399847d7c6768aac15adc862c
      image: docker.io/litmuschaos/workflow-controller:v3.3.1
      imageID: docker.io/litmuschaos/workflow-controller@sha256:054ba49a9b225a3b49a132b7690662d132c7b73aab1084edb24eccf4557b9e6e
      lastState: {}
      name: workflow-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-03-23T08:16:53Z"
    hostIP: 10.85.149.8
    phase: Running
    podIP: 172.30.188.191
    podIPs:
    - ip: 172.30.188.191
    qosClass: Burstable
    startTime: "2023-03-23T08:16:50Z"
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2023-03-20T09:46:38Z"
    labels:
      app: chaos-exporter
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:internalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":8080,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: server
      operation: Update
      time: "2023-03-20T09:46:38Z"
    name: chaos-exporter
    namespace: litmus
    resourceVersion: "427127"
    uid: cc6ffd31-e8c9-4f85-bbdf-3cfbbde439ac
  spec:
    clusterIP: 172.21.22.236
    clusterIPs:
    - 172.21.22.236
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: chaos-exporter
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: chaos
      meta.helm.sh/release-namespace: litmus
    creationTimestamp: "2023-03-19T14:17:35Z"
    labels:
      app.kubernetes.io/component: litmus-auth-server
      app.kubernetes.io/instance: chaos
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: litmus
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/version: 2.15.10
      helm.sh/chart: litmus-2.15.10
      litmuschaos.io/version: 2.14.0
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
            f:litmuschaos.io/version: {}
        f:spec:
          f:internalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":3030,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":9003,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: helm
      operation: Update
      time: "2023-03-19T14:17:35Z"
    name: chaos-litmus-auth-server-service
    namespace: litmus
    resourceVersion: "357911"
    uid: 58b7460b-9690-4262-9591-16d83dd09b97
  spec:
    clusterIP: 172.21.134.48
    clusterIPs:
    - 172.21.134.48
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: auth-server
      port: 9003
      protocol: TCP
      targetPort: 3000
    - name: auth-rpc-server
      port: 3030
      protocol: TCP
      targetPort: 3030
    selector:
      app.kubernetes.io/component: litmus-auth-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: chaos
      meta.helm.sh/release-namespace: litmus
    creationTimestamp: "2023-03-19T14:17:35Z"
    labels:
      app.kubernetes.io/component: litmus-frontend
      app.kubernetes.io/instance: chaos
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: litmus
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/version: 2.15.10
      helm.sh/chart: litmus-2.15.10
      litmuschaos.io/version: 2.14.0
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
            f:litmuschaos.io/version: {}
        f:spec:
          f:internalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":9091,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: helm
      operation: Update
      time: "2023-03-19T14:17:35Z"
    name: chaos-litmus-frontend-service
    namespace: litmus
    resourceVersion: "357909"
    uid: 050a73de-f5ac-42e2-a7e5-c348ff3e1206
  spec:
    clusterIP: 172.21.206.230
    clusterIPs:
    - 172.21.206.230
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 9091
      protocol: TCP
      targetPort: 8080
    selector:
      app.kubernetes.io/component: litmus-frontend
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: chaos
      meta.helm.sh/release-namespace: litmus
    creationTimestamp: "2023-03-19T14:17:35Z"
    labels:
      app.kubernetes.io/component: litmus-server
      app.kubernetes.io/instance: chaos
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: litmus
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/version: 2.15.10
      helm.sh/chart: litmus-2.15.10
      litmuschaos.io/version: 2.14.0
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
            f:litmuschaos.io/version: {}
        f:spec:
          f:internalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":8000,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":9002,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: helm
      operation: Update
      time: "2023-03-19T14:17:35Z"
    name: chaos-litmus-server-service
    namespace: litmus
    resourceVersion: "357906"
    uid: b5932b8e-775a-40ea-afe9-cb8d990de194
  spec:
    clusterIP: 172.21.140.41
    clusterIPs:
    - 172.21.140.41
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: graphql-server
      port: 9002
      protocol: TCP
      targetPort: 8080
    - name: graphql-rpc-server
      port: 8000
      protocol: TCP
      targetPort: 8000
    selector:
      app.kubernetes.io/component: litmus-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: chaos
      meta.helm.sh/release-namespace: litmus
    creationTimestamp: "2023-03-19T14:17:35Z"
    labels:
      app.kubernetes.io/component: mongodb
      app.kubernetes.io/instance: chaos
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mongodb
      helm.sh/chart: mongodb-12.1.11
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:helm.sh/chart: {}
        f:spec:
          f:internalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":27017,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: helm
      operation: Update
      time: "2023-03-19T14:17:35Z"
    name: chaos-mongodb
    namespace: litmus
    resourceVersion: "357913"
    uid: 2505cda7-ca29-4c91-b6e2-8f89000eea1b
  spec:
    clusterIP: 172.21.151.126
    clusterIPs:
    - 172.21.151.126
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: mongodb
      port: 27017
      protocol: TCP
      targetPort: mongodb
    selector:
      app.kubernetes.io/component: mongodb
      app.kubernetes.io/instance: chaos
      app.kubernetes.io/name: mongodb
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2023-03-20T09:46:40Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:internalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":9090,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: server
      operation: Update
      time: "2023-03-20T09:46:40Z"
    name: workflow-controller-metrics
    namespace: litmus
    resourceVersion: "427164"
    uid: 454f36d8-4078-4303-9e3b-b15503af3704
  spec:
    clusterIP: 172.21.193.102
    clusterIPs:
    - 172.21.193.102
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics
      port: 9090
      protocol: TCP
      targetPort: 9090
    selector:
      app: workflow-controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2023-03-20T09:46:37Z"
    generation: 5
    labels:
      app: chaos-exporter
      release: prometheus-stack
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
            f:release: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"chaos-exporter"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"TSDB_SCRAPE_INTERVAL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: server
      operation: Update
      time: "2023-03-20T09:46:37Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:54Z"
    name: chaos-exporter
    namespace: litmus
    resourceVersion: "863025"
    uid: 48e97e94-3ff4-4f7c-9820-62f3c452960a
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: chaos-exporter
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: chaos-exporter
          release: prometheus-stack
      spec:
        containers:
        - env:
          - name: TSDB_SCRAPE_INTERVAL
            value: "10"
          image: litmuschaos/chaos-exporter:2.14.0
          imagePullPolicy: Always
          name: chaos-exporter
          ports:
          - containerPort: 8080
            name: tcp
            protocol: TCP
          resources:
            limits:
              cpu: 225m
              ephemeral-storage: 1Gi
              memory: 500Mi
            requests:
              cpu: 125m
              ephemeral-storage: 500Mi
              memory: 300Mi
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 2000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: litmus-cluster-scope
        serviceAccountName: litmus-cluster-scope
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2023-03-20T09:46:37Z"
      lastUpdateTime: "2023-03-20T09:46:46Z"
      message: ReplicaSet "chaos-exporter-6c9b5988c4" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-03-23T08:16:54Z"
      lastUpdateTime: "2023-03-23T08:16:54Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: chaos
      meta.helm.sh/release-namespace: litmus
    creationTimestamp: "2023-03-19T14:17:35Z"
    generation: 5
    labels:
      app.kubernetes.io/component: litmus-auth-server
      app.kubernetes.io/instance: chaos
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: litmus
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/version: 2.15.10
      helm.sh/chart: litmus-2.15.10
      litmuschaos.io/version: 2.14.0
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
            f:litmuschaos.io/version: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/part-of: {}
                f:app.kubernetes.io/version: {}
                f:helm.sh/chart: {}
                f:litmuschaos.io/version: {}
            f:spec:
              f:automountServiceAccountToken: {}
              f:containers:
                k:{"name":"auth-server"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"DB_PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DB_USER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LITMUS_GQL_GRPC_ENDPOINT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LITMUS_GQL_GRPC_PORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:envFrom: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":3000,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":3030,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"wait-for-mongodb"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: helm
      operation: Update
      time: "2023-03-19T14:17:35Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-23T08:17:27Z"
    name: chaos-litmus-auth-server
    namespace: litmus
    resourceVersion: "863128"
    uid: d58ac3a9-feb6-4ace-a8b0-40a6af98ee36
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: litmus-auth-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: litmus-auth-server
          app.kubernetes.io/instance: chaos
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: litmus
          app.kubernetes.io/part-of: litmus
          app.kubernetes.io/version: 2.15.10
          helm.sh/chart: litmus-2.15.10
          litmuschaos.io/version: 2.14.0
      spec:
        automountServiceAccountToken: false
        containers:
        - env:
          - name: DB_PASSWORD
            value: superhardpassword
          - name: DB_USER
            value: root
          - name: LITMUS_GQL_GRPC_ENDPOINT
            value: chaos-litmus-server-service
          - name: LITMUS_GQL_GRPC_PORT
            value: :8000
          envFrom:
          - secretRef:
              name: chaos-litmus-admin-secret
          - configMapRef:
              name: chaos-litmus-admin-config
          image: litmuschaos/litmusportal-auth-server:2.14.0
          imagePullPolicy: Always
          name: auth-server
          ports:
          - containerPort: 3030
            name: auth-server
            protocol: TCP
          - containerPort: 3000
            name: auth-rpc-server
            protocol: TCP
          resources:
            limits:
              cpu: 550m
              ephemeral-storage: 1Gi
              memory: 712Mi
            requests:
              cpu: 225m
              ephemeral-storage: 500Mi
              memory: 250Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 2000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - while [[ $(curl -sw '%{http_code}' http://chaos-mongodb:27017 -o /dev/null)
            -ne 200 ]]; do sleep 5; echo 'Waiting for the MongoDB to be ready...';
            done; echo 'Connection with MongoDB established'
          command:
          - /bin/sh
          - -c
          image: litmuschaos/curl:2.14.0
          imagePullPolicy: Always
          name: wait-for-mongodb
          resources:
            limits:
              cpu: 250m
              ephemeral-storage: 1Gi
              memory: 512Mi
            requests:
              cpu: 25m
              ephemeral-storage: 500Mi
              memory: 150Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: litmus-server-account
        serviceAccountName: litmus-server-account
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2023-03-20T09:37:10Z"
      lastUpdateTime: "2023-03-20T09:37:10Z"
      message: ReplicaSet "chaos-litmus-auth-server-b8dcdf66b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-03-23T08:17:26Z"
      lastUpdateTime: "2023-03-23T08:17:26Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: chaos
      meta.helm.sh/release-namespace: litmus
    creationTimestamp: "2023-03-19T14:17:35Z"
    generation: 5
    labels:
      app.kubernetes.io/component: litmus-frontend
      app.kubernetes.io/instance: chaos
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: litmus
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/version: 2.15.10
      helm.sh/chart: litmus-2.15.10
      litmuschaos.io/version: 2.14.0
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
            f:litmuschaos.io/version: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/part-of: {}
                f:app.kubernetes.io/version: {}
                f:helm.sh/chart: {}
                f:litmuschaos.io/version: {}
            f:spec:
              f:automountServiceAccountToken: {}
              f:containers:
                k:{"name":"litmusportal-frontend"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/nginx/conf.d/default.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:subPath: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"nginx-config"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
      manager: helm
      operation: Update
      time: "2023-03-19T14:17:35Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-23T08:17:00Z"
    name: chaos-litmus-frontend
    namespace: litmus
    resourceVersion: "863053"
    uid: 8afe133f-a565-423d-8b39-87e0f01f7bf9
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: litmus-frontend
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: litmus-frontend
          app.kubernetes.io/instance: chaos
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: litmus
          app.kubernetes.io/part-of: litmus
          app.kubernetes.io/version: 2.15.10
          helm.sh/chart: litmus-2.15.10
          litmuschaos.io/version: 2.14.0
      spec:
        automountServiceAccountToken: false
        containers:
        - image: litmuschaos/litmusportal-frontend:2.14.0
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: litmusportal-frontend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 550m
              ephemeral-storage: 1Gi
              memory: 512Mi
            requests:
              cpu: 125m
              ephemeral-storage: 500Mi
              memory: 150Mi
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 2000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/nginx/conf.d/default.conf
            name: nginx-config
            subPath: default.conf
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: chaos-litmus-frontend-nginx-configuration
          name: nginx-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2023-03-19T14:17:35Z"
      lastUpdateTime: "2023-03-19T14:17:56Z"
      message: ReplicaSet "chaos-litmus-frontend-6ffc95c884" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-03-23T08:17:00Z"
      lastUpdateTime: "2023-03-23T08:17:00Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: chaos
      meta.helm.sh/release-namespace: litmus
    creationTimestamp: "2023-03-19T14:17:35Z"
    generation: 5
    labels:
      app.kubernetes.io/component: litmus-server
      app.kubernetes.io/instance: chaos
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: litmus
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/version: 2.15.10
      helm.sh/chart: litmus-2.15.10
      litmuschaos.io/version: 2.14.0
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
            f:litmuschaos.io/version: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/part-of: {}
                f:app.kubernetes.io/version: {}
                f:helm.sh/chart: {}
                f:litmuschaos.io/version: {}
            f:spec:
              f:containers:
                k:{"name":"graphql-server"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"AGENT_DEPLOYMENTS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ARGO_WORKFLOW_CONTROLLER_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ARGO_WORKFLOW_EXECUTOR_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CHAOS_CENTER_SCOPE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CHAOS_CENTER_UI_ENDPOINT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"CONTAINER_RUNTIME_EXECUTOR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DB_PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DB_USER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"EVENT_TRACKER_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"HUB_BRANCH_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INGRESS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INGRESS_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LITMUS_AUTH_GRPC_ENDPOINT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LITMUS_AUTH_GRPC_PORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LITMUS_CHAOS_EXPORTER_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LITMUS_CHAOS_OPERATOR_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LITMUS_CHAOS_RUNNER_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LITMUS_PORTAL_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                    k:{"name":"NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                    k:{"name":"REMOTE_HUB_MAX_SIZE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SELF_AGENT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SELF_AGENT_NODE_SELECTOR"}:
                      .: {}
                      f:name: {}
                    k:{"name":"SELF_AGENT_TOLERATIONS"}:
                      .: {}
                      f:name: {}
                    k:{"name":"SERVER_SERVICE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SUBSCRIBER_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TLS_CERT_64"}:
                      .: {}
                      f:name: {}
                    k:{"name":"TLS_SECRET_NAME"}:
                      .: {}
                      f:name: {}
                    k:{"name":"WORKFLOW_HELPER_IMAGE_VERSION"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:envFrom: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8000,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/version"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"wait-for-mongodb"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"gitops-storage"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"hub-storage"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: helm
      operation: Update
      time: "2023-03-19T14:17:35Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-23T08:17:40Z"
    name: chaos-litmus-server
    namespace: litmus
    resourceVersion: "863172"
    uid: ce145649-c0f8-47eb-af46-efc3e38ec4a0
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: litmus-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: litmus-server
          app.kubernetes.io/instance: chaos
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: litmus
          app.kubernetes.io/part-of: litmus
          app.kubernetes.io/version: 2.15.10
          helm.sh/chart: litmus-2.15.10
          litmuschaos.io/version: 2.14.0
      spec:
        containers:
        - env:
          - name: DB_PASSWORD
            value: superhardpassword
          - name: DB_USER
            value: root
          - name: LITMUS_PORTAL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CHAOS_CENTER_SCOPE
            value: cluster
          - name: SERVER_SERVICE_NAME
            value: chaos-litmus-server-service
          - name: INGRESS
            value: "false"
          - name: INGRESS_NAME
            value: litmus-ingress
          - name: LITMUS_AUTH_GRPC_ENDPOINT
            value: chaos-litmus-auth-server-service
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: ARGO_WORKFLOW_CONTROLLER_IMAGE
            value: litmuschaos/workflow-controller:v3.3.1
          - name: ARGO_WORKFLOW_EXECUTOR_IMAGE
            value: litmuschaos/argoexec:v3.3.1
          - name: EVENT_TRACKER_IMAGE
            value: litmuschaos/litmusportal-event-tracker:2.14.0
          - name: LITMUS_CHAOS_EXPORTER_IMAGE
            value: litmuschaos/chaos-exporter:2.14.0
          - name: LITMUS_CHAOS_OPERATOR_IMAGE
            value: litmuschaos/chaos-operator:2.14.0
          - name: LITMUS_CHAOS_RUNNER_IMAGE
            value: litmuschaos/chaos-runner:2.14.0
          - name: SUBSCRIBER_IMAGE
            value: litmuschaos/litmusportal-subscriber:2.14.0
          - name: AGENT_DEPLOYMENTS
            value: '["app=chaos-exporter", "name=chaos-operator", "app=event-tracker",
              "app=workflow-controller"]'
          - name: CHAOS_CENTER_UI_ENDPOINT
          - name: CONTAINER_RUNTIME_EXECUTOR
            value: k8sapi
          - name: HUB_BRANCH_NAME
            value: v2.14.x
          - name: LITMUS_AUTH_GRPC_PORT
            value: :3030
          - name: REMOTE_HUB_MAX_SIZE
            value: "5000000"
          - name: SELF_AGENT
            value: "true"
          - name: SELF_AGENT_NODE_SELECTOR
          - name: SELF_AGENT_TOLERATIONS
          - name: TLS_CERT_64
          - name: TLS_SECRET_NAME
          - name: WORKFLOW_HELPER_IMAGE_VERSION
            value: 2.14.0
          envFrom:
          - secretRef:
              name: chaos-litmus-admin-secret
          - configMapRef:
              name: chaos-litmus-admin-config
          image: litmuschaos/litmusportal-server:2.14.0
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: gql-server
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: graphql-server
          ports:
          - containerPort: 8080
            name: gql-server
            protocol: TCP
          - containerPort: 8000
            name: gql-rpc-server
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: gql-server
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 550m
              ephemeral-storage: 1Gi
              memory: 712Mi
            requests:
              cpu: 225m
              ephemeral-storage: 500Mi
              memory: 250Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 2000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/
            name: gitops-storage
          - mountPath: /tmp/version
            name: hub-storage
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - while [[ $(curl -sw '%{http_code}' http://chaos-mongodb:27017 -o /dev/null)
            -ne 200 ]]; do sleep 5; echo 'Waiting for the MongoDB to be ready...';
            done; echo 'Connection with MongoDB established'
          command:
          - /bin/sh
          - -c
          image: litmuschaos/curl:2.14.0
          imagePullPolicy: Always
          name: wait-for-mongodb
          resources:
            limits:
              cpu: 250m
              ephemeral-storage: 1Gi
              memory: 512Mi
            requests:
              cpu: 25m
              ephemeral-storage: 500Mi
              memory: 150Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: litmus-server-account
        serviceAccountName: litmus-server-account
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: gitops-storage
        - emptyDir: {}
          name: hub-storage
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2023-03-20T09:37:26Z"
      lastUpdateTime: "2023-03-20T09:37:26Z"
      message: ReplicaSet "chaos-litmus-server-585786dd9c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-03-23T08:17:40Z"
      lastUpdateTime: "2023-03-23T08:17:40Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: chaos
      meta.helm.sh/release-namespace: litmus
    creationTimestamp: "2023-03-19T14:17:35Z"
    generation: 8
    labels:
      app.kubernetes.io/component: mongodb
      app.kubernetes.io/instance: chaos
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mongodb
      helm.sh/chart: mongodb-12.1.11
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:helm.sh/chart: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:helm.sh/chart: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"mongodb"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"ALLOW_EMPTY_PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"BITNAMI_DEBUG"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MONGODB_DISABLE_JAVASCRIPT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MONGODB_DISABLE_SYSTEM_LOG"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MONGODB_ENABLE_DIRECTORY_PER_DB"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MONGODB_ENABLE_IPV6"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MONGODB_ENABLE_JOURNAL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MONGODB_PORT_NUMBER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MONGODB_ROOT_PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef: {}
                    k:{"name":"MONGODB_ROOT_USER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MONGODB_SYSTEM_LOG_VERBOSITY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":27017,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/bitnami/mongodb"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/bitnami/scripts"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"common-scripts"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"datadir"}:
                  .: {}
                  f:name: {}
                  f:persistentVolumeClaim:
                    .: {}
                    f:claimName: {}
      manager: helm
      operation: Update
      time: "2023-03-19T14:17:35Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:kubectl.kubernetes.io/restartedAt: {}
      manager: kubectl
      operation: Update
      time: "2023-03-20T09:36:03Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:replicas: {}
          f:unavailableReplicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-28T21:49:46Z"
    name: chaos-mongodb
    namespace: litmus
    resourceVersion: "1800493"
    uid: 00150774-1755-4c92-896f-7b5e9f6077d8
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: mongodb
        app.kubernetes.io/instance: chaos
        app.kubernetes.io/name: mongodb
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2023-03-20T10:36:03+01:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: mongodb
          app.kubernetes.io/instance: chaos
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: mongodb
          helm.sh/chart: mongodb-12.1.11
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: mongodb
                    app.kubernetes.io/instance: chaos
                    app.kubernetes.io/name: mongodb
                namespaces:
                - litmus
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - env:
          - name: BITNAMI_DEBUG
            value: "false"
          - name: MONGODB_ROOT_USER
            value: root
          - name: MONGODB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mongodb-root-password
                name: chaos-mongodb
          - name: ALLOW_EMPTY_PASSWORD
            value: "no"
          - name: MONGODB_SYSTEM_LOG_VERBOSITY
            value: "0"
          - name: MONGODB_DISABLE_SYSTEM_LOG
            value: "no"
          - name: MONGODB_DISABLE_JAVASCRIPT
            value: "no"
          - name: MONGODB_ENABLE_JOURNAL
            value: "yes"
          - name: MONGODB_PORT_NUMBER
            value: "27017"
          - name: MONGODB_ENABLE_IPV6
            value: "no"
          - name: MONGODB_ENABLE_DIRECTORY_PER_DB
            value: "no"
          image: docker.io/bitnami/mongodb:5.0.8-debian-10-r24
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /bitnami/scripts/ping-mongodb.sh
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
          name: mongodb
          ports:
          - containerPort: 27017
            name: mongodb
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bitnami/scripts/readiness-probe.sh
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /bitnami/mongodb
            name: datadir
          - mountPath: /bitnami/scripts
            name: common-scripts
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: chaos-mongodb
        serviceAccountName: chaos-mongodb
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 360
            name: chaos-mongodb-common-scripts
          name: common-scripts
        - name: datadir
          persistentVolumeClaim:
            claimName: chaos-mongodb
  status:
    conditions:
    - lastTransitionTime: "2023-03-20T09:36:03Z"
      lastUpdateTime: "2023-03-20T09:43:27Z"
      message: ReplicaSet "chaos-mongodb-7fcb7c857f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-03-28T21:49:46Z"
      lastUpdateTime: "2023-03-28T21:49:46Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    observedGeneration: 8
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2023-03-20T09:46:37Z"
    generation: 5
    labels:
      app.kubernetes.io/component: operator
      app.kubernetes.io/managed-by: kubectl
      app.kubernetes.io/name: litmus
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/version: v2.0.0
      name: litmus
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:name: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/part-of: {}
                f:app.kubernetes.io/version: {}
                f:name: {}
            f:spec:
              f:containers:
                k:{"name":"chaos-operator"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"CHAOS_RUNNER_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"OPERATOR_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                    k:{"name":"WATCH_NAMESPACE"}:
                      .: {}
                      f:name: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: server
      operation: Update
      time: "2023-03-20T09:46:37Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:55Z"
    name: chaos-operator-ce
    namespace: litmus
    resourceVersion: "863032"
    uid: 1aee712b-6f7b-4582-9915-7087af79d071
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        name: chaos-operator
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: operator
          app.kubernetes.io/managed-by: kubectl
          app.kubernetes.io/name: litmus
          app.kubernetes.io/part-of: litmus
          app.kubernetes.io/version: latest
          name: chaos-operator
      spec:
        containers:
        - args:
          - -leader-elect=true
          command:
          - chaos-operator
          env:
          - name: CHAOS_RUNNER_IMAGE
            value: litmuschaos/chaos-runner:2.14.0
          - name: WATCH_NAMESPACE
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: OPERATOR_NAME
            value: chaos-operator
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: litmuschaos/chaos-operator:2.14.0
          imagePullPolicy: Always
          name: chaos-operator
          resources:
            limits:
              cpu: 225m
              ephemeral-storage: 1Gi
              memory: 500Mi
            requests:
              cpu: 125m
              ephemeral-storage: 500Mi
              memory: 300Mi
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 2000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: litmus-cluster-scope
        serviceAccountName: litmus-cluster-scope
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2023-03-20T09:46:37Z"
      lastUpdateTime: "2023-03-20T09:46:44Z"
      message: ReplicaSet "chaos-operator-ce-84bc885775" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-03-23T08:16:55Z"
      lastUpdateTime: "2023-03-23T08:16:55Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "5"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"debug-pod","namespace":"litmus"},"spec":{"selector":{"matchLabels":{"app":"debug-pod"}},"template":{"metadata":{"labels":{"app":"debug-pod"}},"spec":{"containers":[{"args":["-ec","while :; do echo .; sleep 5;done"],"command":["/bin/sh"],"image":"centos:latest","name":"debug-pod","volumeMounts":[{"mountPath":"/bitnami/mongodb","name":"datadir"}]}],"securityContext":{"fsGroup":1001,"runAsGroup":1001,"runAsNonRoot":true,"runAsUser":1001},"volumes":[{"name":"datadir","persistentVolumeClaim":{"claimName":"chaos-mongodb"}}]}}}}
    creationTimestamp: "2023-03-20T09:21:07Z"
    generation: 9
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"debug-pod"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/bitnami/mongodb"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"datadir"}:
                  .: {}
                  f:name: {}
                  f:persistentVolumeClaim:
                    .: {}
                    f:claimName: {}
      manager: kubectl
      operation: Update
      time: "2023-03-20T09:34:39Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-23T08:17:06Z"
    name: debug-pod
    namespace: litmus
    resourceVersion: "863070"
    uid: c8586ef1-792f-4351-a747-f599e7e516ec
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: debug-pod
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: debug-pod
      spec:
        containers:
        - args:
          - -ec
          - while :; do echo .; sleep 5;done
          command:
          - /bin/sh
          image: centos:latest
          imagePullPolicy: Always
          name: debug-pod
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /bitnami/mongodb
            name: datadir
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
          runAsGroup: 1001
          runAsNonRoot: true
          runAsUser: 1001
        terminationGracePeriodSeconds: 30
        volumes:
        - name: datadir
          persistentVolumeClaim:
            claimName: chaos-mongodb
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2023-03-20T09:21:07Z"
      lastUpdateTime: "2023-03-20T09:34:42Z"
      message: ReplicaSet "debug-pod-55c9b84fb9" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-03-23T08:17:06Z"
      lastUpdateTime: "2023-03-23T08:17:06Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 9
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2023-03-20T09:46:36Z"
    generation: 5
    labels:
      app: event-tracker
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"litmus-event-tracker"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"AGENT_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                  f:envFrom: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: server
      operation: Update
      time: "2023-03-20T09:46:36Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:58Z"
    name: event-tracker
    namespace: litmus
    resourceVersion: "863044"
    uid: 334358e7-8bfa-4c8f-b695-ade2269ab713
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: event-tracker
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: event-tracker
      spec:
        containers:
        - env:
          - name: AGENT_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          envFrom:
          - configMapRef:
              name: agent-config
          - secretRef:
              name: agent-secret
          image: litmuschaos/litmusportal-event-tracker:2.14.0
          imagePullPolicy: Always
          name: litmus-event-tracker
          resources:
            limits:
              cpu: 225m
              ephemeral-storage: 1Gi
              memory: 500Mi
            requests:
              cpu: 125m
              ephemeral-storage: 500Mi
              memory: 300Mi
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 2000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: event-tracker-sa
        serviceAccountName: event-tracker-sa
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2023-03-20T09:46:36Z"
      lastUpdateTime: "2023-03-20T09:46:52Z"
      message: ReplicaSet "event-tracker-744b6fd8cf" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-03-23T08:16:58Z"
      lastUpdateTime: "2023-03-23T08:16:58Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2023-03-20T09:46:36Z"
    generation: 5
    labels:
      app: subscriber
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"subscriber"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"AGENT_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                  f:envFrom: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: server
      operation: Update
      time: "2023-03-20T09:46:36Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-23T08:17:49Z"
    name: subscriber
    namespace: litmus
    resourceVersion: "863198"
    uid: 771ca635-bc70-4045-bacf-0d8f9b7ebfb4
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: subscriber
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: subscriber
      spec:
        containers:
        - env:
          - name: AGENT_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          envFrom:
          - configMapRef:
              name: agent-config
          - secretRef:
              name: agent-secret
          image: litmuschaos/litmusportal-subscriber:2.14.0
          imagePullPolicy: Always
          name: subscriber
          resources:
            limits:
              cpu: 225m
              ephemeral-storage: 1Gi
              memory: 500Mi
            requests:
              cpu: 125m
              ephemeral-storage: 500Mi
              memory: 300Mi
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 2000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: litmus
        serviceAccountName: litmus
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2023-03-20T09:46:36Z"
      lastUpdateTime: "2023-03-20T09:46:42Z"
      message: ReplicaSet "subscriber-686d9b8dd9" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-03-23T08:17:49Z"
      lastUpdateTime: "2023-03-23T08:17:49Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2023-03-20T09:46:40Z"
    generation: 5
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:progressDeadlineSeconds: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"workflow-controller"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"LEADER_ELECTION_DISABLE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: server
      operation: Update
      time: "2023-03-20T09:46:40Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:53Z"
    name: workflow-controller
    namespace: litmus
    resourceVersion: "863012"
    uid: e872a24c-04a6-4d72-8771-4df1f6e9c194
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: workflow-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: workflow-controller
      spec:
        containers:
        - args:
          - --configmap
          - workflow-controller-configmap
          - --executor-image
          - litmuschaos/argoexec:v3.3.1
          - --container-runtime-executor
          - k8sapi
          command:
          - workflow-controller
          env:
          - name: LEADER_ELECTION_DISABLE
            value: "true"
          image: litmuschaos/workflow-controller:v3.3.1
          imagePullPolicy: IfNotPresent
          name: workflow-controller
          resources:
            limits:
              cpu: 225m
              ephemeral-storage: 1Gi
              memory: 500Mi
            requests:
              cpu: 125m
              ephemeral-storage: 500Mi
              memory: 300Mi
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 2000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argo
        serviceAccountName: argo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2023-03-20T09:46:40Z"
      lastUpdateTime: "2023-03-20T09:46:49Z"
      message: ReplicaSet "workflow-controller-768f7d94dc" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-03-23T08:16:53Z"
      lastUpdateTime: "2023-03-23T08:16:53Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2023-03-20T09:46:37Z"
    generation: 5
    labels:
      app: chaos-exporter
      pod-template-hash: 6c9b5988c4
      release: prometheus-stack
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
            f:release: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"48e97e94-3ff4-4f7c-9820-62f3c452960a"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"chaos-exporter"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"TSDB_SCRAPE_INTERVAL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:49Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:54Z"
    name: chaos-exporter-6c9b5988c4
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: chaos-exporter
      uid: 48e97e94-3ff4-4f7c-9820-62f3c452960a
    resourceVersion: "863024"
    uid: 7f1b8e92-2d8a-465c-8b96-a28912c7b173
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: chaos-exporter
        pod-template-hash: 6c9b5988c4
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: chaos-exporter
          pod-template-hash: 6c9b5988c4
          release: prometheus-stack
      spec:
        containers:
        - env:
          - name: TSDB_SCRAPE_INTERVAL
            value: "10"
          image: litmuschaos/chaos-exporter:2.14.0
          imagePullPolicy: Always
          name: chaos-exporter
          ports:
          - containerPort: 8080
            name: tcp
            protocol: TCP
          resources:
            limits:
              cpu: 225m
              ephemeral-storage: 1Gi
              memory: 500Mi
            requests:
              cpu: 125m
              ephemeral-storage: 500Mi
              memory: 300Mi
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 2000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: litmus-cluster-scope
        serviceAccountName: litmus-cluster-scope
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: chaos
      meta.helm.sh/release-namespace: litmus
    creationTimestamp: "2023-03-19T14:17:35Z"
    generation: 5
    labels:
      app.kubernetes.io/component: litmus-auth-server
      app.kubernetes.io/instance: chaos
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: litmus
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/version: 2.15.10
      helm.sh/chart: litmus-2.15.10
      litmuschaos.io/version: 2.14.0
      pod-template-hash: b8dcdf66b
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
            f:litmuschaos.io/version: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"d58ac3a9-feb6-4ace-a8b0-40a6af98ee36"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/part-of: {}
                f:app.kubernetes.io/version: {}
                f:helm.sh/chart: {}
                f:litmuschaos.io/version: {}
                f:pod-template-hash: {}
            f:spec:
              f:automountServiceAccountToken: {}
              f:containers:
                k:{"name":"auth-server"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"DB_PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DB_USER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LITMUS_GQL_GRPC_ENDPOINT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LITMUS_GQL_GRPC_PORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:envFrom: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":3000,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":3030,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"wait-for-mongodb"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:49Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-23T08:17:26Z"
    name: chaos-litmus-auth-server-b8dcdf66b
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: chaos-litmus-auth-server
      uid: d58ac3a9-feb6-4ace-a8b0-40a6af98ee36
    resourceVersion: "863126"
    uid: dd754b6f-d49e-46e8-9026-2882d2c135b8
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: litmus-auth-server
        pod-template-hash: b8dcdf66b
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: litmus-auth-server
          app.kubernetes.io/instance: chaos
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: litmus
          app.kubernetes.io/part-of: litmus
          app.kubernetes.io/version: 2.15.10
          helm.sh/chart: litmus-2.15.10
          litmuschaos.io/version: 2.14.0
          pod-template-hash: b8dcdf66b
      spec:
        automountServiceAccountToken: false
        containers:
        - env:
          - name: DB_PASSWORD
            value: superhardpassword
          - name: DB_USER
            value: root
          - name: LITMUS_GQL_GRPC_ENDPOINT
            value: chaos-litmus-server-service
          - name: LITMUS_GQL_GRPC_PORT
            value: :8000
          envFrom:
          - secretRef:
              name: chaos-litmus-admin-secret
          - configMapRef:
              name: chaos-litmus-admin-config
          image: litmuschaos/litmusportal-auth-server:2.14.0
          imagePullPolicy: Always
          name: auth-server
          ports:
          - containerPort: 3030
            name: auth-server
            protocol: TCP
          - containerPort: 3000
            name: auth-rpc-server
            protocol: TCP
          resources:
            limits:
              cpu: 550m
              ephemeral-storage: 1Gi
              memory: 712Mi
            requests:
              cpu: 225m
              ephemeral-storage: 500Mi
              memory: 250Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 2000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - while [[ $(curl -sw '%{http_code}' http://chaos-mongodb:27017 -o /dev/null)
            -ne 200 ]]; do sleep 5; echo 'Waiting for the MongoDB to be ready...';
            done; echo 'Connection with MongoDB established'
          command:
          - /bin/sh
          - -c
          image: litmuschaos/curl:2.14.0
          imagePullPolicy: Always
          name: wait-for-mongodb
          resources:
            limits:
              cpu: 250m
              ephemeral-storage: 1Gi
              memory: 512Mi
            requests:
              cpu: 25m
              ephemeral-storage: 500Mi
              memory: 150Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: litmus-server-account
        serviceAccountName: litmus-server-account
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: chaos
      meta.helm.sh/release-namespace: litmus
    creationTimestamp: "2023-03-19T14:17:35Z"
    generation: 5
    labels:
      app.kubernetes.io/component: litmus-frontend
      app.kubernetes.io/instance: chaos
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: litmus
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/version: 2.15.10
      helm.sh/chart: litmus-2.15.10
      litmuschaos.io/version: 2.14.0
      pod-template-hash: 6ffc95c884
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
            f:litmuschaos.io/version: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"8afe133f-a565-423d-8b39-87e0f01f7bf9"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/part-of: {}
                f:app.kubernetes.io/version: {}
                f:helm.sh/chart: {}
                f:litmuschaos.io/version: {}
                f:pod-template-hash: {}
            f:spec:
              f:automountServiceAccountToken: {}
              f:containers:
                k:{"name":"litmusportal-frontend"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/nginx/conf.d/default.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:subPath: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"nginx-config"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:49Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-23T08:17:00Z"
    name: chaos-litmus-frontend-6ffc95c884
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: chaos-litmus-frontend
      uid: 8afe133f-a565-423d-8b39-87e0f01f7bf9
    resourceVersion: "863052"
    uid: 00282446-8ea6-4fcb-9b58-082f00087a97
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: litmus-frontend
        pod-template-hash: 6ffc95c884
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: litmus-frontend
          app.kubernetes.io/instance: chaos
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: litmus
          app.kubernetes.io/part-of: litmus
          app.kubernetes.io/version: 2.15.10
          helm.sh/chart: litmus-2.15.10
          litmuschaos.io/version: 2.14.0
          pod-template-hash: 6ffc95c884
      spec:
        automountServiceAccountToken: false
        containers:
        - image: litmuschaos/litmusportal-frontend:2.14.0
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: litmusportal-frontend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 550m
              ephemeral-storage: 1Gi
              memory: 512Mi
            requests:
              cpu: 125m
              ephemeral-storage: 500Mi
              memory: 150Mi
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 2000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/nginx/conf.d/default.conf
            name: nginx-config
            subPath: default.conf
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: chaos-litmus-frontend-nginx-configuration
          name: nginx-config
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: chaos
      meta.helm.sh/release-namespace: litmus
    creationTimestamp: "2023-03-19T14:17:35Z"
    generation: 5
    labels:
      app.kubernetes.io/component: litmus-server
      app.kubernetes.io/instance: chaos
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: litmus
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/version: 2.15.10
      helm.sh/chart: litmus-2.15.10
      litmuschaos.io/version: 2.14.0
      pod-template-hash: 585786dd9c
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
            f:litmuschaos.io/version: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"ce145649-c0f8-47eb-af46-efc3e38ec4a0"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/part-of: {}
                f:app.kubernetes.io/version: {}
                f:helm.sh/chart: {}
                f:litmuschaos.io/version: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"graphql-server"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"AGENT_DEPLOYMENTS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ARGO_WORKFLOW_CONTROLLER_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ARGO_WORKFLOW_EXECUTOR_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CHAOS_CENTER_SCOPE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CHAOS_CENTER_UI_ENDPOINT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"CONTAINER_RUNTIME_EXECUTOR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DB_PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DB_USER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"EVENT_TRACKER_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"HUB_BRANCH_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INGRESS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INGRESS_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LITMUS_AUTH_GRPC_ENDPOINT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LITMUS_AUTH_GRPC_PORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LITMUS_CHAOS_EXPORTER_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LITMUS_CHAOS_OPERATOR_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LITMUS_CHAOS_RUNNER_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LITMUS_PORTAL_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                    k:{"name":"NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                    k:{"name":"REMOTE_HUB_MAX_SIZE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SELF_AGENT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SELF_AGENT_NODE_SELECTOR"}:
                      .: {}
                      f:name: {}
                    k:{"name":"SELF_AGENT_TOLERATIONS"}:
                      .: {}
                      f:name: {}
                    k:{"name":"SERVER_SERVICE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SUBSCRIBER_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TLS_CERT_64"}:
                      .: {}
                      f:name: {}
                    k:{"name":"TLS_SECRET_NAME"}:
                      .: {}
                      f:name: {}
                    k:{"name":"WORKFLOW_HELPER_IMAGE_VERSION"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:envFrom: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8000,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/version"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"wait-for-mongodb"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"gitops-storage"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"hub-storage"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:49Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-23T08:17:40Z"
    name: chaos-litmus-server-585786dd9c
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: chaos-litmus-server
      uid: ce145649-c0f8-47eb-af46-efc3e38ec4a0
    resourceVersion: "863171"
    uid: 7c03e29b-696c-4603-820b-2256304b1baa
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: litmus-server
        pod-template-hash: 585786dd9c
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: litmus-server
          app.kubernetes.io/instance: chaos
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: litmus
          app.kubernetes.io/part-of: litmus
          app.kubernetes.io/version: 2.15.10
          helm.sh/chart: litmus-2.15.10
          litmuschaos.io/version: 2.14.0
          pod-template-hash: 585786dd9c
      spec:
        containers:
        - env:
          - name: DB_PASSWORD
            value: superhardpassword
          - name: DB_USER
            value: root
          - name: LITMUS_PORTAL_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CHAOS_CENTER_SCOPE
            value: cluster
          - name: SERVER_SERVICE_NAME
            value: chaos-litmus-server-service
          - name: INGRESS
            value: "false"
          - name: INGRESS_NAME
            value: litmus-ingress
          - name: LITMUS_AUTH_GRPC_ENDPOINT
            value: chaos-litmus-auth-server-service
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: ARGO_WORKFLOW_CONTROLLER_IMAGE
            value: litmuschaos/workflow-controller:v3.3.1
          - name: ARGO_WORKFLOW_EXECUTOR_IMAGE
            value: litmuschaos/argoexec:v3.3.1
          - name: EVENT_TRACKER_IMAGE
            value: litmuschaos/litmusportal-event-tracker:2.14.0
          - name: LITMUS_CHAOS_EXPORTER_IMAGE
            value: litmuschaos/chaos-exporter:2.14.0
          - name: LITMUS_CHAOS_OPERATOR_IMAGE
            value: litmuschaos/chaos-operator:2.14.0
          - name: LITMUS_CHAOS_RUNNER_IMAGE
            value: litmuschaos/chaos-runner:2.14.0
          - name: SUBSCRIBER_IMAGE
            value: litmuschaos/litmusportal-subscriber:2.14.0
          - name: AGENT_DEPLOYMENTS
            value: '["app=chaos-exporter", "name=chaos-operator", "app=event-tracker",
              "app=workflow-controller"]'
          - name: CHAOS_CENTER_UI_ENDPOINT
          - name: CONTAINER_RUNTIME_EXECUTOR
            value: k8sapi
          - name: HUB_BRANCH_NAME
            value: v2.14.x
          - name: LITMUS_AUTH_GRPC_PORT
            value: :3030
          - name: REMOTE_HUB_MAX_SIZE
            value: "5000000"
          - name: SELF_AGENT
            value: "true"
          - name: SELF_AGENT_NODE_SELECTOR
          - name: SELF_AGENT_TOLERATIONS
          - name: TLS_CERT_64
          - name: TLS_SECRET_NAME
          - name: WORKFLOW_HELPER_IMAGE_VERSION
            value: 2.14.0
          envFrom:
          - secretRef:
              name: chaos-litmus-admin-secret
          - configMapRef:
              name: chaos-litmus-admin-config
          image: litmuschaos/litmusportal-server:2.14.0
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: gql-server
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: graphql-server
          ports:
          - containerPort: 8080
            name: gql-server
            protocol: TCP
          - containerPort: 8000
            name: gql-rpc-server
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: gql-server
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 550m
              ephemeral-storage: 1Gi
              memory: 712Mi
            requests:
              cpu: 225m
              ephemeral-storage: 500Mi
              memory: 250Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 2000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/
            name: gitops-storage
          - mountPath: /tmp/version
            name: hub-storage
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - while [[ $(curl -sw '%{http_code}' http://chaos-mongodb:27017 -o /dev/null)
            -ne 200 ]]; do sleep 5; echo 'Waiting for the MongoDB to be ready...';
            done; echo 'Connection with MongoDB established'
          command:
          - /bin/sh
          - -c
          image: litmuschaos/curl:2.14.0
          imagePullPolicy: Always
          name: wait-for-mongodb
          resources:
            limits:
              cpu: 250m
              ephemeral-storage: 1Gi
              memory: 512Mi
            requests:
              cpu: 25m
              ephemeral-storage: 500Mi
              memory: 150Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: litmus-server-account
        serviceAccountName: litmus-server-account
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: gitops-storage
        - emptyDir: {}
          name: hub-storage
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: chaos
      meta.helm.sh/release-namespace: litmus
    creationTimestamp: "2023-03-20T09:36:03Z"
    generation: 7
    labels:
      app.kubernetes.io/component: mongodb
      app.kubernetes.io/instance: chaos
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mongodb
      helm.sh/chart: mongodb-12.1.11
      pod-template-hash: 7fcb7c857f
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:helm.sh/chart: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"00150774-1755-4c92-896f-7b5e9f6077d8"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:kubectl.kubernetes.io/restartedAt: {}
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:helm.sh/chart: {}
                f:pod-template-hash: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"mongodb"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"ALLOW_EMPTY_PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"BITNAMI_DEBUG"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MONGODB_DISABLE_JAVASCRIPT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MONGODB_DISABLE_SYSTEM_LOG"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MONGODB_ENABLE_DIRECTORY_PER_DB"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MONGODB_ENABLE_IPV6"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MONGODB_ENABLE_JOURNAL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MONGODB_PORT_NUMBER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MONGODB_ROOT_PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef: {}
                    k:{"name":"MONGODB_ROOT_USER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MONGODB_SYSTEM_LOG_VERBOSITY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":27017,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/bitnami/mongodb"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/bitnami/scripts"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"common-scripts"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"datadir"}:
                  .: {}
                  f:name: {}
                  f:persistentVolumeClaim:
                    .: {}
                    f:claimName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:49Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-28T21:47:25Z"
    name: chaos-mongodb-7fcb7c857f
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: chaos-mongodb
      uid: 00150774-1755-4c92-896f-7b5e9f6077d8
    resourceVersion: "1800492"
    uid: 8ee3b385-1d72-46c7-bb2d-006db5d155ab
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: mongodb
        app.kubernetes.io/instance: chaos
        app.kubernetes.io/name: mongodb
        pod-template-hash: 7fcb7c857f
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2023-03-20T10:36:03+01:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: mongodb
          app.kubernetes.io/instance: chaos
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: mongodb
          helm.sh/chart: mongodb-12.1.11
          pod-template-hash: 7fcb7c857f
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: mongodb
                    app.kubernetes.io/instance: chaos
                    app.kubernetes.io/name: mongodb
                namespaces:
                - litmus
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - env:
          - name: BITNAMI_DEBUG
            value: "false"
          - name: MONGODB_ROOT_USER
            value: root
          - name: MONGODB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mongodb-root-password
                name: chaos-mongodb
          - name: ALLOW_EMPTY_PASSWORD
            value: "no"
          - name: MONGODB_SYSTEM_LOG_VERBOSITY
            value: "0"
          - name: MONGODB_DISABLE_SYSTEM_LOG
            value: "no"
          - name: MONGODB_DISABLE_JAVASCRIPT
            value: "no"
          - name: MONGODB_ENABLE_JOURNAL
            value: "yes"
          - name: MONGODB_PORT_NUMBER
            value: "27017"
          - name: MONGODB_ENABLE_IPV6
            value: "no"
          - name: MONGODB_ENABLE_DIRECTORY_PER_DB
            value: "no"
          image: docker.io/bitnami/mongodb:5.0.8-debian-10-r24
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /bitnami/scripts/ping-mongodb.sh
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
          name: mongodb
          ports:
          - containerPort: 27017
            name: mongodb
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bitnami/scripts/readiness-probe.sh
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /bitnami/mongodb
            name: datadir
          - mountPath: /bitnami/scripts
            name: common-scripts
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: chaos-mongodb
        serviceAccountName: chaos-mongodb
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 360
            name: chaos-mongodb-common-scripts
          name: common-scripts
        - name: datadir
          persistentVolumeClaim:
            claimName: chaos-mongodb
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 7
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2023-03-20T09:46:37Z"
    generation: 5
    labels:
      app.kubernetes.io/component: operator
      app.kubernetes.io/managed-by: kubectl
      app.kubernetes.io/name: litmus
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/version: latest
      name: chaos-operator
      pod-template-hash: 84bc885775
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"1aee712b-6f7b-4582-9915-7087af79d071"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/part-of: {}
                f:app.kubernetes.io/version: {}
                f:name: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"chaos-operator"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"CHAOS_RUNNER_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"OPERATOR_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                    k:{"name":"WATCH_NAMESPACE"}:
                      .: {}
                      f:name: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:49Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:55Z"
    name: chaos-operator-ce-84bc885775
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: chaos-operator-ce
      uid: 1aee712b-6f7b-4582-9915-7087af79d071
    resourceVersion: "863031"
    uid: 04871a0e-cf60-4e81-8c13-4b1a833d1457
  spec:
    replicas: 1
    selector:
      matchLabels:
        name: chaos-operator
        pod-template-hash: 84bc885775
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: operator
          app.kubernetes.io/managed-by: kubectl
          app.kubernetes.io/name: litmus
          app.kubernetes.io/part-of: litmus
          app.kubernetes.io/version: latest
          name: chaos-operator
          pod-template-hash: 84bc885775
      spec:
        containers:
        - args:
          - -leader-elect=true
          command:
          - chaos-operator
          env:
          - name: CHAOS_RUNNER_IMAGE
            value: litmuschaos/chaos-runner:2.14.0
          - name: WATCH_NAMESPACE
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: OPERATOR_NAME
            value: chaos-operator
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: litmuschaos/chaos-operator:2.14.0
          imagePullPolicy: Always
          name: chaos-operator
          resources:
            limits:
              cpu: 225m
              ephemeral-storage: 1Gi
              memory: 500Mi
            requests:
              cpu: 125m
              ephemeral-storage: 500Mi
              memory: 300Mi
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 2000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: litmus-cluster-scope
        serviceAccountName: litmus-cluster-scope
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "5"
      deployment.kubernetes.io/revision-history: "3"
    creationTimestamp: "2023-03-20T09:31:31Z"
    generation: 7
    labels:
      app: debug-pod
      pod-template-hash: 55c9b84fb9
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:deployment.kubernetes.io/revision-history: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"c8586ef1-792f-4351-a747-f599e7e516ec"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"debug-pod"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/bitnami/mongodb"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"datadir"}:
                  .: {}
                  f:name: {}
                  f:persistentVolumeClaim:
                    .: {}
                    f:claimName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:49Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-23T08:17:06Z"
    name: debug-pod-55c9b84fb9
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: debug-pod
      uid: c8586ef1-792f-4351-a747-f599e7e516ec
    resourceVersion: "863069"
    uid: bf421729-bae6-470d-ba09-711dcb35c615
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: debug-pod
        pod-template-hash: 55c9b84fb9
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: debug-pod
          pod-template-hash: 55c9b84fb9
      spec:
        containers:
        - args:
          - -ec
          - while :; do echo .; sleep 5;done
          command:
          - /bin/sh
          image: centos:latest
          imagePullPolicy: Always
          name: debug-pod
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /bitnami/mongodb
            name: datadir
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
          runAsGroup: 1001
          runAsNonRoot: true
          runAsUser: 1001
        terminationGracePeriodSeconds: 30
        volumes:
        - name: datadir
          persistentVolumeClaim:
            claimName: chaos-mongodb
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 7
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2023-03-20T09:46:36Z"
    generation: 5
    labels:
      app: event-tracker
      pod-template-hash: 744b6fd8cf
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"334358e7-8bfa-4c8f-b695-ade2269ab713"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"litmus-event-tracker"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"AGENT_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                  f:envFrom: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:50Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:58Z"
    name: event-tracker-744b6fd8cf
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: event-tracker
      uid: 334358e7-8bfa-4c8f-b695-ade2269ab713
    resourceVersion: "863043"
    uid: d2d2b583-afa8-40ba-8beb-fc7d429093e2
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: event-tracker
        pod-template-hash: 744b6fd8cf
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: event-tracker
          pod-template-hash: 744b6fd8cf
      spec:
        containers:
        - env:
          - name: AGENT_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          envFrom:
          - configMapRef:
              name: agent-config
          - secretRef:
              name: agent-secret
          image: litmuschaos/litmusportal-event-tracker:2.14.0
          imagePullPolicy: Always
          name: litmus-event-tracker
          resources:
            limits:
              cpu: 225m
              ephemeral-storage: 1Gi
              memory: 500Mi
            requests:
              cpu: 125m
              ephemeral-storage: 500Mi
              memory: 300Mi
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 2000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: event-tracker-sa
        serviceAccountName: event-tracker-sa
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2023-03-20T09:46:36Z"
    generation: 5
    labels:
      app: subscriber
      pod-template-hash: 686d9b8dd9
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"771ca635-bc70-4045-bacf-0d8f9b7ebfb4"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"subscriber"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"AGENT_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                  f:envFrom: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:50Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-23T08:17:49Z"
    name: subscriber-686d9b8dd9
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: subscriber
      uid: 771ca635-bc70-4045-bacf-0d8f9b7ebfb4
    resourceVersion: "863197"
    uid: 69fc4480-197d-453c-98bd-7f7fef7f3bf8
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: subscriber
        pod-template-hash: 686d9b8dd9
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: subscriber
          pod-template-hash: 686d9b8dd9
      spec:
        containers:
        - env:
          - name: AGENT_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          envFrom:
          - configMapRef:
              name: agent-config
          - secretRef:
              name: agent-secret
          image: litmuschaos/litmusportal-subscriber:2.14.0
          imagePullPolicy: Always
          name: subscriber
          resources:
            limits:
              cpu: 225m
              ephemeral-storage: 1Gi
              memory: 500Mi
            requests:
              cpu: 125m
              ephemeral-storage: 500Mi
              memory: 300Mi
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 2000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: litmus
        serviceAccountName: litmus
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2023-03-20T09:46:40Z"
    generation: 5
    labels:
      app: workflow-controller
      pod-template-hash: 768f7d94dc
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"e872a24c-04a6-4d72-8771-4df1f6e9c194"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"workflow-controller"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"LEADER_ELECTION_DISABLE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2023-03-23T08:16:50Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-23T08:16:53Z"
    name: workflow-controller-768f7d94dc
    namespace: litmus
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: workflow-controller
      uid: e872a24c-04a6-4d72-8771-4df1f6e9c194
    resourceVersion: "863011"
    uid: afee2f90-ed75-4509-aa00-859a26e7c6d3
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: workflow-controller
        pod-template-hash: 768f7d94dc
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: workflow-controller
          pod-template-hash: 768f7d94dc
      spec:
        containers:
        - args:
          - --configmap
          - workflow-controller-configmap
          - --executor-image
          - litmuschaos/argoexec:v3.3.1
          - --container-runtime-executor
          - k8sapi
          command:
          - workflow-controller
          env:
          - name: LEADER_ELECTION_DISABLE
            value: "true"
          image: litmuschaos/workflow-controller:v3.3.1
          imagePullPolicy: IfNotPresent
          name: workflow-controller
          resources:
            limits:
              cpu: 225m
              ephemeral-storage: 1Gi
              memory: 500Mi
            requests:
              cpu: 125m
              ephemeral-storage: 500Mi
              memory: 300Mi
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 2000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argo
        serviceAccountName: argo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      batch.kubernetes.io/job-tracking: ""
    creationTimestamp: "2023-03-22T14:11:12Z"
    generation: 1
    labels:
      app.kubernetes.io/component: experiment-job
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/version: 2.14.0
      chaosUID: 20e9d138-7dd0-4242-8670-3cac9d5ab8ac
      name: pod-delete
    managedFields:
    - apiVersion: batch/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:chaosUID: {}
            f:name: {}
        f:spec:
          f:backoffLimit: {}
          f:completionMode: {}
          f:completions: {}
          f:parallelism: {}
          f:suspend: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/part-of: {}
                f:app.kubernetes.io/version: {}
                f:chaosUID: {}
                f:name: {}
              f:name: {}
              f:namespace: {}
            f:spec:
              f:containers:
                k:{"name":"pod-delete-mzxuev"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"ANNOTATION_CHECK"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ANNOTATION_KEY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"APP_KIND"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"APP_LABEL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"APP_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CHAOS_INTERVAL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CHAOS_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CHAOS_SERVICE_ACCOUNT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CHAOS_UID"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CHAOSENGINE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"EXPERIMENT_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"FORCE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"JOB_CLEANUP_POLICY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LIB"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LIB_IMAGE_PULL_POLICY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NODE_LABEL"}:
                      .: {}
                      f:name: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                    k:{"name":"PODS_AFFECTED_PERC"}:
                      .: {}
                      f:name: {}
                    k:{"name":"RAMP_TIME"}:
                      .: {}
                      f:name: {}
                    k:{"name":"SEQUENCE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"STATUS_CHECK_DELAY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"STATUS_CHECK_TIMEOUT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TARGET_PODS"}:
                      .: {}
                      f:name: {}
                    k:{"name":"TERMINATION_GRACE_PERIOD_SECONDS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TOTAL_CHAOS_DURATION"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: chaos-runner
      operation: Update
      time: "2023-03-22T14:11:12Z"
    - apiVersion: batch/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:completionTime: {}
          f:conditions: {}
          f:ready: {}
          f:startTime: {}
          f:succeeded: {}
          f:uncountedTerminatedPods: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-22T14:12:29Z"
    name: pod-delete-mzxuev
    namespace: litmus
    resourceVersion: "788489"
    uid: 637dc50d-ff6b-4160-8d59-9262f3a425f7
  spec:
    backoffLimit: 6
    completionMode: NonIndexed
    completions: 1
    parallelism: 1
    selector:
      matchLabels:
        controller-uid: 637dc50d-ff6b-4160-8d59-9262f3a425f7
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: experiment-job
          app.kubernetes.io/part-of: litmus
          app.kubernetes.io/version: 2.14.0
          chaosUID: 20e9d138-7dd0-4242-8670-3cac9d5ab8ac
          controller-uid: 637dc50d-ff6b-4160-8d59-9262f3a425f7
          job-name: pod-delete-mzxuev
          name: pod-delete
        name: pod-delete-mzxuev
        namespace: litmus
      spec:
        containers:
        - args:
          - -c
          - ./experiments -name pod-delete
          command:
          - /bin/bash
          env:
          - name: ANNOTATION_KEY
            value: litmuschaos.io/chaos
          - name: TOTAL_CHAOS_DURATION
            value: "30"
          - name: FORCE
            value: "false"
          - name: PODS_AFFECTED_PERC
          - name: ANNOTATION_CHECK
            value: "false"
          - name: CHAOS_SERVICE_ACCOUNT
            value: litmus-admin
          - name: TARGET_PODS
          - name: SEQUENCE
            value: parallel
          - name: STATUS_CHECK_TIMEOUT
            value: "180"
          - name: CHAOS_INTERVAL
            value: "10"
          - name: NODE_LABEL
          - name: CHAOS_NAMESPACE
            value: litmus
          - name: APP_NAMESPACE
            value: podtato
          - name: APP_KIND
            value: deployment
          - name: CHAOS_UID
            value: 20e9d138-7dd0-4242-8670-3cac9d5ab8ac
          - name: LIB_IMAGE_PULL_POLICY
            value: Always
          - name: RAMP_TIME
          - name: STATUS_CHECK_DELAY
            value: "2"
          - name: CHAOSENGINE
            value: podtato-main-pod-delete-chaosw854p
          - name: APP_LABEL
            value: name=podtato-main
          - name: EXPERIMENT_NAME
            value: pod-delete
          - name: TERMINATION_GRACE_PERIOD_SECONDS
            value: "0"
          - name: LIB
            value: litmus
          - name: JOB_CLEANUP_POLICY
            value: retain
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          image: litmuschaos/go-runner:2.14.0
          imagePullPolicy: Always
          name: pod-delete-mzxuev
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: litmus-admin
        serviceAccountName: litmus-admin
        terminationGracePeriodSeconds: 30
  status:
    completionTime: "2023-03-22T14:12:29Z"
    conditions:
    - lastProbeTime: "2023-03-22T14:12:29Z"
      lastTransitionTime: "2023-03-22T14:12:29Z"
      status: "True"
      type: Complete
    ready: 0
    startTime: "2023-03-22T14:11:12Z"
    succeeded: 1
    uncountedTerminatedPods: {}
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      batch.kubernetes.io/job-tracking: ""
    creationTimestamp: "2023-03-27T13:36:35Z"
    generation: 1
    labels:
      app.kubernetes.io/component: experiment-job
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/runtime-api-usage: "true"
      app.kubernetes.io/version: latest
      chaosUID: 49b7adf7-8b81-47ab-9d5c-9f7553c12cae
      name: pod-network-loss
    managedFields:
    - apiVersion: batch/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/runtime-api-usage: {}
            f:app.kubernetes.io/version: {}
            f:chaosUID: {}
            f:name: {}
        f:spec:
          f:backoffLimit: {}
          f:completionMode: {}
          f:completions: {}
          f:parallelism: {}
          f:suspend: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/part-of: {}
                f:app.kubernetes.io/runtime-api-usage: {}
                f:app.kubernetes.io/version: {}
                f:chaosUID: {}
                f:name: {}
              f:name: {}
              f:namespace: {}
            f:spec:
              f:containers:
                k:{"name":"pod-network-loss-pgta7r"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"ANNOTATION_CHECK"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ANNOTATION_KEY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"APP_KIND"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"APP_LABEL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"APP_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CHAOS_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CHAOS_SERVICE_ACCOUNT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CHAOS_UID"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CHAOSENGINE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CONTAINER_RUNTIME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DESTINATION_HOSTS"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DESTINATION_IPS"}:
                      .: {}
                      f:name: {}
                    k:{"name":"EXPERIMENT_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"JOB_CLEANUP_POLICY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LIB_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LIB_IMAGE_PULL_POLICY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NETWORK_INTERFACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NETWORK_PACKET_LOSS_PERCENTAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NODE_LABEL"}:
                      .: {}
                      f:name: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                    k:{"name":"PODS_AFFECTED_PERC"}:
                      .: {}
                      f:name: {}
                    k:{"name":"RAMP_TIME"}:
                      .: {}
                      f:name: {}
                    k:{"name":"SEQUENCE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SOCKET_PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"STATUS_CHECK_DELAY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"STATUS_CHECK_TIMEOUT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TARGET_CONTAINER"}:
                      .: {}
                      f:name: {}
                    k:{"name":"TARGET_PODS"}:
                      .: {}
                      f:name: {}
                    k:{"name":"TC_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TERMINATION_GRACE_PERIOD_SECONDS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TOTAL_CHAOS_DURATION"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: chaos-runner
      operation: Update
      time: "2023-03-27T13:36:35Z"
    - apiVersion: batch/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:completionTime: {}
          f:conditions: {}
          f:ready: {}
          f:startTime: {}
          f:succeeded: {}
          f:uncountedTerminatedPods: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-27T13:37:18Z"
    name: pod-network-loss-pgta7r
    namespace: litmus
    resourceVersion: "1578939"
    uid: cb100e92-c6bc-43d7-8630-c6d58c32cee8
  spec:
    backoffLimit: 6
    completionMode: NonIndexed
    completions: 1
    parallelism: 1
    selector:
      matchLabels:
        controller-uid: cb100e92-c6bc-43d7-8630-c6d58c32cee8
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: experiment-job
          app.kubernetes.io/part-of: litmus
          app.kubernetes.io/runtime-api-usage: "true"
          app.kubernetes.io/version: latest
          chaosUID: 49b7adf7-8b81-47ab-9d5c-9f7553c12cae
          controller-uid: cb100e92-c6bc-43d7-8630-c6d58c32cee8
          job-name: pod-network-loss-pgta7r
          name: pod-network-loss
        name: pod-network-loss-pgta7r
        namespace: litmus
      spec:
        containers:
        - args:
          - -c
          - ./experiments -name pod-network-loss
          command:
          - /bin/bash
          env:
          - name: LIB_IMAGE_PULL_POLICY
            value: Always
          - name: TARGET_CONTAINER
          - name: NETWORK_INTERFACE
            value: eth0
          - name: APP_LABEL
            value: name in (balancereader,transactionhistory)
          - name: NETWORK_PACKET_LOSS_PERCENTAGE
            value: "100"
          - name: TOTAL_CHAOS_DURATION
            value: "90"
          - name: NODE_LABEL
          - name: STATUS_CHECK_TIMEOUT
            value: "180"
          - name: CHAOS_SERVICE_ACCOUNT
            value: litmus-admin
          - name: TARGET_PODS
          - name: SOCKET_PATH
            value: /var/run/docker.sock
          - name: JOB_CLEANUP_POLICY
            value: retain
          - name: APP_NAMESPACE
            value: bank
          - name: APP_KIND
            value: deployment
          - name: PODS_AFFECTED_PERC
          - name: DESTINATION_IPS
          - name: DESTINATION_HOSTS
          - name: STATUS_CHECK_DELAY
            value: "2"
          - name: TC_IMAGE
            value: gaiadocker/iproute2
          - name: RAMP_TIME
          - name: CHAOS_NAMESPACE
            value: litmus
          - name: EXPERIMENT_NAME
            value: pod-network-loss
          - name: TERMINATION_GRACE_PERIOD_SECONDS
            value: "0"
          - name: CHAOS_UID
            value: 49b7adf7-8b81-47ab-9d5c-9f7553c12cae
          - name: ANNOTATION_CHECK
            value: "false"
          - name: CHAOSENGINE
            value: pod-network-loss-chaos9b6k8
          - name: ANNOTATION_KEY
            value: litmuschaos.io/chaos
          - name: LIB_IMAGE
            value: litmuschaos/go-runner:latest
          - name: CONTAINER_RUNTIME
            value: docker
          - name: SEQUENCE
            value: parallel
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          image: litmuschaos/go-runner:latest
          imagePullPolicy: Always
          name: pod-network-loss-pgta7r
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: litmus-admin
        serviceAccountName: litmus-admin
        terminationGracePeriodSeconds: 30
  status:
    completionTime: "2023-03-27T13:37:18Z"
    conditions:
    - lastProbeTime: "2023-03-27T13:37:18Z"
      lastTransitionTime: "2023-03-27T13:37:18Z"
      status: "True"
      type: Complete
    ready: 0
    startTime: "2023-03-27T13:36:35Z"
    succeeded: 1
    uncountedTerminatedPods: {}
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      batch.kubernetes.io/job-tracking: ""
    creationTimestamp: "2023-03-27T16:29:03Z"
    generation: 1
    labels:
      app.kubernetes.io/component: experiment-job
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/runtime-api-usage: "true"
      app.kubernetes.io/version: latest
      chaosUID: 8cd4258c-5274-4cc2-8187-8273791de517
      name: pod-network-loss
    managedFields:
    - apiVersion: batch/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/runtime-api-usage: {}
            f:app.kubernetes.io/version: {}
            f:chaosUID: {}
            f:name: {}
        f:spec:
          f:backoffLimit: {}
          f:completionMode: {}
          f:completions: {}
          f:parallelism: {}
          f:suspend: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/part-of: {}
                f:app.kubernetes.io/runtime-api-usage: {}
                f:app.kubernetes.io/version: {}
                f:chaosUID: {}
                f:name: {}
              f:name: {}
              f:namespace: {}
            f:spec:
              f:containers:
                k:{"name":"pod-network-loss-wfc04e"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"ANNOTATION_CHECK"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ANNOTATION_KEY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"APP_KIND"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"APP_LABEL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"APP_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CHAOS_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CHAOS_SERVICE_ACCOUNT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CHAOS_UID"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CHAOSENGINE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CONTAINER_RUNTIME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DESTINATION_HOSTS"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DESTINATION_IPS"}:
                      .: {}
                      f:name: {}
                    k:{"name":"EXPERIMENT_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"JOB_CLEANUP_POLICY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LIB_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LIB_IMAGE_PULL_POLICY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NETWORK_INTERFACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NETWORK_PACKET_LOSS_PERCENTAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NODE_LABEL"}:
                      .: {}
                      f:name: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                    k:{"name":"PODS_AFFECTED_PERC"}:
                      .: {}
                      f:name: {}
                    k:{"name":"RAMP_TIME"}:
                      .: {}
                      f:name: {}
                    k:{"name":"SEQUENCE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SOCKET_PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"STATUS_CHECK_DELAY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"STATUS_CHECK_TIMEOUT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TARGET_CONTAINER"}:
                      .: {}
                      f:name: {}
                    k:{"name":"TARGET_PODS"}:
                      .: {}
                      f:name: {}
                    k:{"name":"TC_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TERMINATION_GRACE_PERIOD_SECONDS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TOTAL_CHAOS_DURATION"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: chaos-runner
      operation: Update
      time: "2023-03-27T16:29:03Z"
    - apiVersion: batch/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:completionTime: {}
          f:conditions: {}
          f:ready: {}
          f:startTime: {}
          f:succeeded: {}
          f:uncountedTerminatedPods: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2023-03-27T16:29:45Z"
    name: pod-network-loss-wfc04e
    namespace: litmus
    resourceVersion: "1601585"
    uid: e7fdb2b6-dd80-4211-8073-f4e3c2dc657d
  spec:
    backoffLimit: 6
    completionMode: NonIndexed
    completions: 1
    parallelism: 1
    selector:
      matchLabels:
        controller-uid: e7fdb2b6-dd80-4211-8073-f4e3c2dc657d
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: experiment-job
          app.kubernetes.io/part-of: litmus
          app.kubernetes.io/runtime-api-usage: "true"
          app.kubernetes.io/version: latest
          chaosUID: 8cd4258c-5274-4cc2-8187-8273791de517
          controller-uid: e7fdb2b6-dd80-4211-8073-f4e3c2dc657d
          job-name: pod-network-loss-wfc04e
          name: pod-network-loss
        name: pod-network-loss-wfc04e
        namespace: litmus
      spec:
        containers:
        - args:
          - -c
          - ./experiments -name pod-network-loss
          command:
          - /bin/bash
          env:
          - name: CHAOS_NAMESPACE
            value: litmus
          - name: LIB_IMAGE
            value: litmuschaos/go-runner:latest
          - name: PODS_AFFECTED_PERC
          - name: TC_IMAGE
            value: gaiadocker/iproute2
          - name: RAMP_TIME
          - name: CHAOSENGINE
            value: pod-network-loss-chaoslf8hs
          - name: CHAOS_UID
            value: 8cd4258c-5274-4cc2-8187-8273791de517
          - name: ANNOTATION_KEY
            value: litmuschaos.io/chaos
          - name: NODE_LABEL
          - name: STATUS_CHECK_DELAY
            value: "2"
          - name: LIB_IMAGE_PULL_POLICY
            value: Always
          - name: TARGET_CONTAINER
          - name: NETWORK_PACKET_LOSS_PERCENTAGE
            value: "100"
          - name: APP_KIND
            value: deployment
          - name: TARGET_PODS
          - name: STATUS_CHECK_TIMEOUT
            value: "180"
          - name: TERMINATION_GRACE_PERIOD_SECONDS
            value: "0"
          - name: CHAOS_SERVICE_ACCOUNT
            value: litmus-admin
          - name: DESTINATION_IPS
          - name: JOB_CLEANUP_POLICY
            value: retain
          - name: ANNOTATION_CHECK
            value: "false"
          - name: NETWORK_INTERFACE
            value: eth0
          - name: SOCKET_PATH
            value: /var/run/docker.sock
          - name: TOTAL_CHAOS_DURATION
            value: "90"
          - name: CONTAINER_RUNTIME
            value: docker
          - name: DESTINATION_HOSTS
          - name: APP_LABEL
            value: name=balancereader
          - name: APP_NAMESPACE
            value: bank
          - name: EXPERIMENT_NAME
            value: pod-network-loss
          - name: SEQUENCE
            value: parallel
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          image: litmuschaos/go-runner:latest
          imagePullPolicy: Always
          name: pod-network-loss-wfc04e
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: litmus-admin
        serviceAccountName: litmus-admin
        terminationGracePeriodSeconds: 30
  status:
    completionTime: "2023-03-27T16:29:45Z"
    conditions:
    - lastProbeTime: "2023-03-27T16:29:45Z"
      lastTransitionTime: "2023-03-27T16:29:45Z"
      status: "True"
      type: Complete
    ready: 0
    startTime: "2023-03-27T16:29:03Z"
    succeeded: 1
    uncountedTerminatedPods: {}
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
